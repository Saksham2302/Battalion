
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author chise
 */
public class Cadre extends javax.swing.JFrame {

    /**
     * Creates new form Cadre
     */
    Database db= new Database();
    Connection c = db.create_connection(true);
    Statement s;
    private int mouseX, mouseY;
    boolean flag = true;
    DefaultTableModel model_fullscreen, model_table;
    String a;
    public Cadre() {
        initComponents();
        
        ScrollPaneC.getVerticalScrollBar().setUnitIncrement(16);
        ScrollPaneA.getVerticalScrollBar().setUnitIncrement(16);
        ScrollPaneB.getVerticalScrollBar().setUnitIncrement(16);
        fullscreen_ScrollPaneB.getVerticalScrollBar().setUnitIncrement(16);
                
        print_buttonA.setVisible(true);
        insert_buttonA.setVisible(true);
        print_buttonB.setVisible(false);
        edit_buttonB.setVisible(false);
        refresh_buttonB.setVisible(false);
        fullscreen_buttonB.setVisible(false);
        
        model_fullscreen=(DefaultTableModel) fullscreen_tableB.getModel();
        model_table=(DefaultTableModel) TableG_out.getModel();
        try {
            s = c.createStatement();
        } catch (Exception ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        move_panel = new javax.swing.JPanel();
        bg = new javax.swing.JPanel();
        exit_icon = new javax.swing.JLabel();
        minimize = new javax.swing.JLabel();
        Separator = new javax.swing.JSeparator();
        side_pane = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        go_back_label = new javax.swing.JLabel();
        title_label = new javax.swing.JLabel();
        title_icon = new javax.swing.JLabel();
        menuA = new javax.swing.JPanel();
        menuA_icon = new javax.swing.JLabel();
        menuA_label = new javax.swing.JLabel();
        menuB = new javax.swing.JPanel();
        menuB_icon = new javax.swing.JLabel();
        menuB_label = new javax.swing.JLabel();
        ScrollPaneA = new javax.swing.JScrollPane();
        panelA = new javax.swing.JPanel();
        service_number_underline = new javax.swing.JSeparator();
        service_number_textfield = new javax.swing.JTextField();
        service_number_label = new javax.swing.JLabel();
        panelA_bottom_line = new javax.swing.JSeparator();
        okay = new javax.swing.JLabel();
        name_label = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        rank_label = new javax.swing.JLabel();
        rank = new javax.swing.JLabel();
        company_label = new javax.swing.JLabel();
        company = new javax.swing.JLabel();
        trade_label = new javax.swing.JLabel();
        trade = new javax.swing.JLabel();
        unit_label = new javax.swing.JLabel();
        unit = new javax.swing.JLabel();
        address_label = new javax.swing.JLabel();
        PO_label = new javax.swing.JLabel();
        teh_label = new javax.swing.JLabel();
        vill_label = new javax.swing.JLabel();
        midA1 = new javax.swing.JSeparator();
        address_label1 = new javax.swing.JLabel();
        firing_label = new javax.swing.JLabel();
        drill_label = new javax.swing.JLabel();
        BPET_label = new javax.swing.JLabel();
        midA2 = new javax.swing.JSeparator();
        bpet_textfield = new javax.swing.JTextField();
        marks_underline1 = new javax.swing.JSeparator();
        bpet_max_textfield = new javax.swing.JTextField();
        marks_underline2 = new javax.swing.JSeparator();
        firing_textfield = new javax.swing.JTextField();
        marks_underline3 = new javax.swing.JSeparator();
        firing_max_textfield = new javax.swing.JTextField();
        marks_underline4 = new javax.swing.JSeparator();
        drill_textfield = new javax.swing.JTextField();
        marks_underline5 = new javax.swing.JSeparator();
        drill_max_textfield = new javax.swing.JTextField();
        marks_underline6 = new javax.swing.JSeparator();
        bfg_label = new javax.swing.JLabel();
        IPIT_label = new javax.swing.JLabel();
        IPIT_textfield = new javax.swing.JTextField();
        marks_underline7 = new javax.swing.JSeparator();
        IPIT_max_textfield = new javax.swing.JTextField();
        marks_underline8 = new javax.swing.JSeparator();
        bfg_textfield = new javax.swing.JTextField();
        marks_underline9 = new javax.swing.JSeparator();
        bfg_max_textfield = new javax.swing.JTextField();
        marks_underline10 = new javax.swing.JSeparator();
        result_label = new javax.swing.JLabel();
        total_label = new javax.swing.JLabel();
        total_textfield = new javax.swing.JTextField();
        marks_underline11 = new javax.swing.JSeparator();
        total_max_textfield = new javax.swing.JTextField();
        marks_underline12 = new javax.swing.JSeparator();
        result_textfield = new javax.swing.JTextField();
        results_underline = new javax.swing.JSeparator();
        remarks_label = new javax.swing.JLabel();
        remarks_textfield = new javax.swing.JTextField();
        remarks_underline = new javax.swing.JSeparator();
        from_date_label = new javax.swing.JLabel();
        to_date_label = new javax.swing.JLabel();
        from_date_combobox = new javax.swing.JComboBox<>();
        from_month_combobox = new javax.swing.JComboBox<>();
        from_year_combobox = new javax.swing.JComboBox<>();
        to_date_combobox = new javax.swing.JComboBox<>();
        to_month_combobox = new javax.swing.JComboBox<>();
        to_year_combobox = new javax.swing.JComboBox<>();
        NK_textfield = new javax.swing.JTextField();
        cadre_underline1 = new javax.swing.JSeparator();
        HAV_textfield = new javax.swing.JTextField();
        cadre_underline2 = new javax.swing.JSeparator();
        NB_SUB_textfield = new javax.swing.JTextField();
        cadre_underline3 = new javax.swing.JSeparator();
        marks_underline25 = new javax.swing.JSeparator();
        marks_underline26 = new javax.swing.JSeparator();
        marks_underline27 = new javax.swing.JSeparator();
        marks_underline28 = new javax.swing.JSeparator();
        marks_underline29 = new javax.swing.JSeparator();
        marks_underline30 = new javax.swing.JSeparator();
        panelB = new javax.swing.JPanel();
        ScrollPaneB = new javax.swing.JScrollPane();
        TableG_out = new javax.swing.JTable();
        service_number_labelB = new javax.swing.JLabel();
        service_numberB = new javax.swing.JTextField();
        textfield_underline = new javax.swing.JSeparator();
        okayB = new javax.swing.JLabel();
        ScrollPaneC = new javax.swing.JScrollPane();
        panelC = new javax.swing.JPanel();
        service_number_labelC = new javax.swing.JLabel();
        panelC_bottom_line = new javax.swing.JSeparator();
        name_labelC = new javax.swing.JLabel();
        army_numberC = new javax.swing.JLabel();
        rank_labelC = new javax.swing.JLabel();
        rankC = new javax.swing.JLabel();
        address_labelC = new javax.swing.JLabel();
        PO_labelC = new javax.swing.JLabel();
        teh_labelC = new javax.swing.JLabel();
        vill_labelC = new javax.swing.JLabel();
        midC3 = new javax.swing.JSeparator();
        marks_obtainedC = new javax.swing.JLabel();
        slash7 = new javax.swing.JLabel();
        firing_labelC = new javax.swing.JLabel();
        drill_labelC = new javax.swing.JLabel();
        BPET_labelC = new javax.swing.JLabel();
        midA4 = new javax.swing.JSeparator();
        bpet_textfieldC = new javax.swing.JTextField();
        marks_underline13 = new javax.swing.JSeparator();
        bpet_max_textfieldC = new javax.swing.JTextField();
        marks_underline14 = new javax.swing.JSeparator();
        slash8 = new javax.swing.JLabel();
        firing_textfieldC = new javax.swing.JTextField();
        marks_underline15 = new javax.swing.JSeparator();
        firing_max_textfieldC = new javax.swing.JTextField();
        marks_underline16 = new javax.swing.JSeparator();
        drill_textfieldC = new javax.swing.JTextField();
        marks_underline17 = new javax.swing.JSeparator();
        drill_max_textfieldC = new javax.swing.JTextField();
        marks_underline18 = new javax.swing.JSeparator();
        bfg_labelC = new javax.swing.JLabel();
        IPIT_labelC = new javax.swing.JLabel();
        IPIT_textfieldC = new javax.swing.JTextField();
        marks_underline19 = new javax.swing.JSeparator();
        IPIT_max_textfieldC = new javax.swing.JTextField();
        marks_underline20 = new javax.swing.JSeparator();
        bfg_textfieldC = new javax.swing.JTextField();
        marks_underline21 = new javax.swing.JSeparator();
        bfg_max_textfieldC = new javax.swing.JTextField();
        marks_underline22 = new javax.swing.JSeparator();
        result_labelC = new javax.swing.JLabel();
        total_labelC = new javax.swing.JLabel();
        total_textfieldC = new javax.swing.JTextField();
        marks_underline23 = new javax.swing.JSeparator();
        total_max_textfieldC = new javax.swing.JTextField();
        marks_underline24 = new javax.swing.JSeparator();
        result_textfieldC = new javax.swing.JTextField();
        results_underline1 = new javax.swing.JSeparator();
        remarks_labelC = new javax.swing.JLabel();
        remarks_textfieldC = new javax.swing.JTextField();
        remarks_underline1 = new javax.swing.JSeparator();
        NK_textfieldC = new javax.swing.JTextField();
        cadre_underline4 = new javax.swing.JSeparator();
        HAV_textfieldC = new javax.swing.JTextField();
        cadre_underline5 = new javax.swing.JSeparator();
        NB_SUB_textfieldC = new javax.swing.JTextField();
        cadre_underline6 = new javax.swing.JSeparator();
        slash9 = new javax.swing.JLabel();
        slash10 = new javax.swing.JLabel();
        slash11 = new javax.swing.JLabel();
        slash12 = new javax.swing.JLabel();
        nameC = new javax.swing.JLabel();
        midC4 = new javax.swing.JSeparator();
        changing_for_label = new javax.swing.JLabel();
        midC0 = new javax.swing.JSeparator();
        from_labelC = new javax.swing.JLabel();
        to_labelC = new javax.swing.JLabel();
        from_date_comboboxC = new javax.swing.JComboBox<>();
        from_month_comboboxC = new javax.swing.JComboBox<>();
        from_year_comboboxC = new javax.swing.JComboBox<>();
        to_date_comboboxC = new javax.swing.JComboBox<>();
        to_month_comboboxC = new javax.swing.JComboBox<>();
        to_year_comboboxC = new javax.swing.JComboBox<>();
        print_buttonA = new javax.swing.JPanel();
        print_label = new javax.swing.JLabel();
        insert_buttonA = new javax.swing.JPanel();
        insert_label = new javax.swing.JLabel();
        edit_buttonB = new javax.swing.JPanel();
        edit_labelB = new javax.swing.JLabel();
        refresh_buttonB = new javax.swing.JPanel();
        refresh_labelB = new javax.swing.JLabel();
        print_buttonB = new javax.swing.JPanel();
        print_labelB = new javax.swing.JLabel();
        update_buttonC = new javax.swing.JPanel();
        update_labelC = new javax.swing.JLabel();
        fullscreen_buttonB = new javax.swing.JPanel();
        fullscreen_labelB = new javax.swing.JLabel();
        fullscreen_panelB = new javax.swing.JPanel();
        fullscreen_ScrollPaneB = new javax.swing.JScrollPane();
        fullscreen_tableB = new javax.swing.JTable();
        exit_fullscreen_buttonB = new javax.swing.JPanel();
        exit_fullscreen_labelB = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 1280, 720));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        move_panel.setFocusable(false);
        move_panel.setOpaque(false);
        move_panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                move_panelMouseDragged(evt);
            }
        });
        move_panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                move_panelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout move_panelLayout = new javax.swing.GroupLayout(move_panel);
        move_panel.setLayout(move_panelLayout);
        move_panelLayout.setHorizontalGroup(
            move_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
        );
        move_panelLayout.setVerticalGroup(
            move_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        getContentPane().add(move_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 30));

        bg.setBackground(new java.awt.Color(255, 255, 255));
        bg.setMaximumSize(new java.awt.Dimension(1280, 720));
        bg.setMinimumSize(new java.awt.Dimension(1280, 720));
        bg.setPreferredSize(new java.awt.Dimension(1280, 720));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        exit_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PNGS/remove_purple.png"))); // NOI18N
        exit_icon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit_iconMouseClicked(evt);
            }
        });
        bg.add(exit_icon, new org.netbeans.lib.awtextra.AbsoluteConstraints(1215, 30, -1, -1));

        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PNGS/minimize-purple.png"))); // NOI18N
        minimize.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeMouseClicked(evt);
            }
        });
        bg.add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 30, -1, 40));

        Separator.setForeground(new java.awt.Color(54, 33, 89));
        Separator.setPreferredSize(new java.awt.Dimension(50, 20));
        bg.add(Separator, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 190, 890, 10));

        side_pane.setBackground(new java.awt.Color(54, 33, 89));
        side_pane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        side_pane.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 280, 50));

        go_back_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PNGS/left-arrow.png"))); // NOI18N
        go_back_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                go_back_labelMouseClicked(evt);
            }
        });
        side_pane.add(go_back_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        title_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        title_label.setForeground(new java.awt.Color(255, 255, 255));
        title_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title_label.setText("Cadre");
        side_pane.add(title_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 110, 40));

        title_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PNGS/cadre white.png"))); // NOI18N
        side_pane.add(title_icon, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 90, 70));

        menuA.setBackground(new java.awt.Color(85, 65, 118));
        menuA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAMouseClicked(evt);
            }
        });

        menuA_icon.setForeground(new java.awt.Color(255, 255, 255));
        menuA_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuA_icon.setText("A");

        menuA_label.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        menuA_label.setForeground(new java.awt.Color(255, 255, 255));
        menuA_label.setText("Create Record");

        javax.swing.GroupLayout menuALayout = new javax.swing.GroupLayout(menuA);
        menuA.setLayout(menuALayout);
        menuALayout.setHorizontalGroup(
            menuALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuALayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(menuA_icon)
                .addGap(33, 33, 33)
                .addComponent(menuA_label)
                .addContainerGap(135, Short.MAX_VALUE))
        );
        menuALayout.setVerticalGroup(
            menuALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuALayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(menuALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(menuA_label, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(menuA_icon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        side_pane.add(menuA, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 330, 60));

        menuB.setBackground(new java.awt.Color(85, 65, 118));
        menuB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuBMouseClicked(evt);
            }
        });

        menuB_icon.setForeground(new java.awt.Color(255, 255, 255));
        menuB_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuB_icon.setText("B");

        menuB_label.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        menuB_label.setForeground(new java.awt.Color(255, 255, 255));
        menuB_label.setText("View by Army Number");

        javax.swing.GroupLayout menuBLayout = new javax.swing.GroupLayout(menuB);
        menuB.setLayout(menuBLayout);
        menuBLayout.setHorizontalGroup(
            menuBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(menuB_icon)
                .addGap(33, 33, 33)
                .addComponent(menuB_label)
                .addContainerGap(69, Short.MAX_VALUE))
        );
        menuBLayout.setVerticalGroup(
            menuBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(menuBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(menuB_label, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(menuB_icon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        side_pane.add(menuB, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 330, 60));

        bg.add(side_pane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, 740));

        ScrollPaneA.setBorder(null);
        ScrollPaneA.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelA.setBackground(new java.awt.Color(255, 255, 255));
        panelA.setFocusable(false);
        panelA.setMaximumSize(new java.awt.Dimension(950, 1310));
        panelA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        service_number_underline.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(service_number_underline, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 400, 20));

        service_number_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        service_number_textfield.setForeground(new java.awt.Color(54, 33, 89));
        service_number_textfield.setBorder(null);
        service_number_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        service_number_textfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                service_number_textfieldKeyPressed(evt);
            }
        });
        panelA.add(service_number_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 400, 40));

        service_number_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        service_number_label.setForeground(new java.awt.Color(51, 51, 51));
        service_number_label.setText("Army Number");
        panelA.add(service_number_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, -1, 40));

        panelA_bottom_line.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(panelA_bottom_line, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 990, 910, 5));

        okay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PNGS/check-mark.png"))); // NOI18N
        okay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okayMouseClicked(evt);
            }
        });
        panelA.add(okay, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, -1, 40));

        name_label.setBackground(new java.awt.Color(255, 255, 255));
        name_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        name_label.setForeground(new java.awt.Color(51, 51, 51));
        name_label.setText("Name");
        panelA.add(name_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, -1, 40));

        name.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        name.setForeground(new java.awt.Color(54, 33, 89));
        name.setText("> XXXXXXX");
        panelA.add(name, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, 30));

        rank_label.setBackground(new java.awt.Color(255, 255, 255));
        rank_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        rank_label.setForeground(new java.awt.Color(51, 51, 51));
        rank_label.setText("Rank");
        panelA.add(rank_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, 40));

        rank.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        rank.setForeground(new java.awt.Color(54, 33, 89));
        rank.setText("> XXXXXXX");
        panelA.add(rank, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, -1, 30));

        company_label.setBackground(new java.awt.Color(255, 255, 255));
        company_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        company_label.setForeground(new java.awt.Color(51, 51, 51));
        company_label.setText("Company");
        panelA.add(company_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 260, -1, 40));

        company.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        company.setForeground(new java.awt.Color(54, 33, 89));
        company.setText("> XXXXXXX");
        panelA.add(company, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 300, -1, 30));

        trade_label.setBackground(new java.awt.Color(255, 255, 255));
        trade_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        trade_label.setForeground(new java.awt.Color(51, 51, 51));
        trade_label.setText("Trade");
        panelA.add(trade_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 170, -1, 40));

        trade.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        trade.setForeground(new java.awt.Color(54, 33, 89));
        trade.setText("> XXXXXXX");
        panelA.add(trade, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, -1, 30));

        unit_label.setBackground(new java.awt.Color(255, 255, 255));
        unit_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        unit_label.setForeground(new java.awt.Color(51, 51, 51));
        unit_label.setText("Unit");
        panelA.add(unit_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 260, -1, 40));

        unit.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        unit.setForeground(new java.awt.Color(54, 33, 89));
        unit.setText("> XXXXXXX");
        panelA.add(unit, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 300, -1, 30));

        address_label.setBackground(new java.awt.Color(255, 255, 255));
        address_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        address_label.setForeground(new java.awt.Color(51, 51, 51));
        address_label.setText("Cadre");
        panelA.add(address_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 490, -1, 50));

        PO_label.setBackground(new java.awt.Color(255, 255, 255));
        PO_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        PO_label.setForeground(new java.awt.Color(66, 50, 77));
        PO_label.setText("HAV");
        panelA.add(PO_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 550, -1, 40));

        teh_label.setBackground(new java.awt.Color(255, 255, 255));
        teh_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        teh_label.setForeground(new java.awt.Color(66, 50, 77));
        teh_label.setText("NB SUB");
        panelA.add(teh_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 550, -1, 40));

        vill_label.setBackground(new java.awt.Color(255, 255, 255));
        vill_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        vill_label.setForeground(new java.awt.Color(66, 50, 77));
        vill_label.setText("NK");
        panelA.add(vill_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 550, -1, 40));

        midA1.setForeground(new java.awt.Color(204, 204, 255));
        panelA.add(midA1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 515, 440, 10));

        address_label1.setBackground(new java.awt.Color(255, 255, 255));
        address_label1.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        address_label1.setForeground(new java.awt.Color(51, 51, 51));
        address_label1.setText("Marks Obtained");
        panelA.add(address_label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 680, -1, 50));

        firing_label.setBackground(new java.awt.Color(255, 255, 255));
        firing_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        firing_label.setForeground(new java.awt.Color(66, 50, 77));
        firing_label.setText("Firing");
        panelA.add(firing_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 740, -1, 40));

        drill_label.setBackground(new java.awt.Color(255, 255, 255));
        drill_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        drill_label.setForeground(new java.awt.Color(66, 50, 77));
        drill_label.setText("Drill");
        panelA.add(drill_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 740, -1, 40));

        BPET_label.setBackground(new java.awt.Color(255, 255, 255));
        BPET_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        BPET_label.setForeground(new java.awt.Color(66, 50, 77));
        BPET_label.setText("BPET");
        panelA.add(BPET_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 740, -1, 40));

        midA2.setForeground(new java.awt.Color(204, 204, 255));
        panelA.add(midA2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 705, 310, 10));

        bpet_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bpet_textfield.setForeground(new java.awt.Color(54, 33, 89));
        bpet_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bpet_textfield.setBorder(null);
        bpet_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        bpet_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bpet_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bpet_textfieldFocusLost(evt);
            }
        });
        panelA.add(bpet_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 780, 50, 40));

        marks_underline1.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 820, 50, 20));

        bpet_max_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bpet_max_textfield.setForeground(new java.awt.Color(54, 33, 89));
        bpet_max_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bpet_max_textfield.setBorder(null);
        bpet_max_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        bpet_max_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bpet_max_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bpet_max_textfieldFocusLost(evt);
            }
        });
        panelA.add(bpet_max_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 780, 50, 40));

        marks_underline2.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 820, 50, 20));

        firing_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        firing_textfield.setForeground(new java.awt.Color(54, 33, 89));
        firing_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firing_textfield.setBorder(null);
        firing_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        firing_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firing_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firing_textfieldFocusLost(evt);
            }
        });
        panelA.add(firing_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 780, 50, 40));

        marks_underline3.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 820, 50, 20));

        firing_max_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        firing_max_textfield.setForeground(new java.awt.Color(54, 33, 89));
        firing_max_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firing_max_textfield.setBorder(null);
        firing_max_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        firing_max_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                firing_max_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                firing_max_textfieldFocusLost(evt);
            }
        });
        panelA.add(firing_max_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 780, 50, 40));

        marks_underline4.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 820, 50, 20));

        drill_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        drill_textfield.setForeground(new java.awt.Color(54, 33, 89));
        drill_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        drill_textfield.setBorder(null);
        drill_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        drill_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                drill_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                drill_textfieldFocusLost(evt);
            }
        });
        panelA.add(drill_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 780, 50, 40));

        marks_underline5.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline5, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 820, 50, 20));

        drill_max_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        drill_max_textfield.setForeground(new java.awt.Color(54, 33, 89));
        drill_max_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        drill_max_textfield.setBorder(null);
        drill_max_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        drill_max_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                drill_max_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                drill_max_textfieldFocusLost(evt);
            }
        });
        panelA.add(drill_max_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 780, 50, 40));

        marks_underline6.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline6, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 820, 50, 20));

        bfg_label.setBackground(new java.awt.Color(255, 255, 255));
        bfg_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        bfg_label.setForeground(new java.awt.Color(66, 50, 77));
        bfg_label.setText("Bfg");
        panelA.add(bfg_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 740, -1, 40));

        IPIT_label.setBackground(new java.awt.Color(255, 255, 255));
        IPIT_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        IPIT_label.setForeground(new java.awt.Color(66, 50, 77));
        IPIT_label.setText("IP/IT");
        panelA.add(IPIT_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 740, -1, 40));

        IPIT_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        IPIT_textfield.setForeground(new java.awt.Color(54, 33, 89));
        IPIT_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPIT_textfield.setBorder(null);
        IPIT_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        IPIT_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                IPIT_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                IPIT_textfieldFocusLost(evt);
            }
        });
        panelA.add(IPIT_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 780, 50, 40));

        marks_underline7.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 820, 50, 20));

        IPIT_max_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        IPIT_max_textfield.setForeground(new java.awt.Color(54, 33, 89));
        IPIT_max_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPIT_max_textfield.setBorder(null);
        IPIT_max_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        IPIT_max_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                IPIT_max_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                IPIT_max_textfieldFocusLost(evt);
            }
        });
        panelA.add(IPIT_max_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 780, 50, 40));

        marks_underline8.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 820, 50, 20));

        bfg_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bfg_textfield.setForeground(new java.awt.Color(54, 33, 89));
        bfg_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bfg_textfield.setBorder(null);
        bfg_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        bfg_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bfg_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bfg_textfieldFocusLost(evt);
            }
        });
        panelA.add(bfg_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 780, 50, 40));

        marks_underline9.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline9, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 820, 50, 20));

        bfg_max_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bfg_max_textfield.setForeground(new java.awt.Color(54, 33, 89));
        bfg_max_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bfg_max_textfield.setBorder(null);
        bfg_max_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        bfg_max_textfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                bfg_max_textfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                bfg_max_textfieldFocusLost(evt);
            }
        });
        panelA.add(bfg_max_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 780, 50, 40));

        marks_underline10.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline10, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 820, 50, 20));

        result_label.setBackground(new java.awt.Color(255, 255, 255));
        result_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        result_label.setForeground(new java.awt.Color(66, 50, 77));
        result_label.setText("Result");
        panelA.add(result_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 840, -1, 40));

        total_label.setBackground(new java.awt.Color(255, 255, 255));
        total_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        total_label.setForeground(new java.awt.Color(66, 50, 77));
        total_label.setText("Total");
        panelA.add(total_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 840, -1, 40));

        total_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        total_textfield.setForeground(new java.awt.Color(54, 33, 89));
        total_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total_textfield.setBorder(null);
        total_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelA.add(total_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 880, 50, 40));

        marks_underline11.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 920, 50, 20));

        total_max_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        total_max_textfield.setForeground(new java.awt.Color(54, 33, 89));
        total_max_textfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total_max_textfield.setBorder(null);
        total_max_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelA.add(total_max_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 880, 50, 40));

        marks_underline12.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(marks_underline12, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 920, 50, 20));

        result_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        result_textfield.setForeground(new java.awt.Color(54, 33, 89));
        result_textfield.setBorder(null);
        result_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelA.add(result_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 880, 200, 40));

        results_underline.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(results_underline, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 920, 200, 20));

        remarks_label.setBackground(new java.awt.Color(255, 255, 255));
        remarks_label.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        remarks_label.setForeground(new java.awt.Color(66, 50, 77));
        remarks_label.setText("Remarks");
        panelA.add(remarks_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 840, 140, 40));

        remarks_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        remarks_textfield.setForeground(new java.awt.Color(54, 33, 89));
        remarks_textfield.setBorder(null);
        remarks_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelA.add(remarks_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 880, 340, 40));

        remarks_underline.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(remarks_underline, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 920, 340, 20));

        from_date_label.setBackground(new java.awt.Color(255, 255, 255));
        from_date_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        from_date_label.setForeground(new java.awt.Color(51, 51, 51));
        from_date_label.setText("From Date");
        panelA.add(from_date_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, -1, 40));

        to_date_label.setBackground(new java.awt.Color(255, 255, 255));
        to_date_label.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        to_date_label.setForeground(new java.awt.Color(51, 51, 51));
        to_date_label.setText("To Date");
        panelA.add(to_date_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, -1, 40));

        from_date_combobox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        from_date_combobox.setForeground(new java.awt.Color(44, 62, 80));
        from_date_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DD", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        from_date_combobox.setBorder(null);
        panelA.add(from_date_combobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 400, 70, 40));

        from_month_combobox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        from_month_combobox.setForeground(new java.awt.Color(44, 62, 80));
        from_month_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MM", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        from_month_combobox.setBorder(null);
        panelA.add(from_month_combobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 70, 40));

        from_year_combobox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        from_year_combobox.setForeground(new java.awt.Color(44, 62, 80));
        from_year_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YYYY", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099", "2100", " " }));
        from_year_combobox.setBorder(null);
        panelA.add(from_year_combobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 400, 70, 40));

        to_date_combobox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        to_date_combobox.setForeground(new java.awt.Color(44, 62, 80));
        to_date_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DD", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        to_date_combobox.setBorder(null);
        panelA.add(to_date_combobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 400, 70, 40));

        to_month_combobox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        to_month_combobox.setForeground(new java.awt.Color(44, 62, 80));
        to_month_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MM", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        to_month_combobox.setBorder(null);
        panelA.add(to_month_combobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 70, 40));

        to_year_combobox.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        to_year_combobox.setForeground(new java.awt.Color(44, 62, 80));
        to_year_combobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YYYY", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099", "2100", " " }));
        to_year_combobox.setBorder(null);
        panelA.add(to_year_combobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 400, 70, 40));

        NK_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        NK_textfield.setForeground(new java.awt.Color(54, 33, 89));
        NK_textfield.setBorder(null);
        NK_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        NK_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NK_textfieldActionPerformed(evt);
            }
        });
        panelA.add(NK_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 590, 210, 40));

        cadre_underline1.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(cadre_underline1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 630, 210, 20));

        HAV_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        HAV_textfield.setForeground(new java.awt.Color(54, 33, 89));
        HAV_textfield.setBorder(null);
        HAV_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        HAV_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HAV_textfieldActionPerformed(evt);
            }
        });
        panelA.add(HAV_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 590, 210, 40));

        cadre_underline2.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(cadre_underline2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 630, 210, 20));

        NB_SUB_textfield.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        NB_SUB_textfield.setForeground(new java.awt.Color(54, 33, 89));
        NB_SUB_textfield.setBorder(null);
        NB_SUB_textfield.setMargin(new java.awt.Insets(2, 4, 2, 2));
        NB_SUB_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NB_SUB_textfieldActionPerformed(evt);
            }
        });
        panelA.add(NB_SUB_textfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 590, 210, 40));

        cadre_underline3.setForeground(new java.awt.Color(54, 33, 89));
        panelA.add(cadre_underline3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 630, 210, 20));

        marks_underline25.setForeground(new java.awt.Color(54, 33, 89));
        marks_underline25.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelA.add(marks_underline25, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 880, 10, 40));

        marks_underline26.setForeground(new java.awt.Color(54, 33, 89));
        marks_underline26.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelA.add(marks_underline26, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 780, 10, 40));

        marks_underline27.setForeground(new java.awt.Color(54, 33, 89));
        marks_underline27.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelA.add(marks_underline27, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 780, 10, 40));

        marks_underline28.setForeground(new java.awt.Color(54, 33, 89));
        marks_underline28.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelA.add(marks_underline28, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 780, 10, 40));

        marks_underline29.setForeground(new java.awt.Color(54, 33, 89));
        marks_underline29.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelA.add(marks_underline29, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 780, 10, 40));

        marks_underline30.setForeground(new java.awt.Color(54, 33, 89));
        marks_underline30.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelA.add(marks_underline30, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 780, 10, 40));

        ScrollPaneA.setViewportView(panelA);

        bg.add(ScrollPaneA, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 192, 910, 480));

        panelB.setBackground(new java.awt.Color(255, 255, 255));
        panelB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ScrollPaneB.setBackground(new java.awt.Color(255, 255, 255));
        ScrollPaneB.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        TableG_out.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        TableG_out.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S. No.", "Army No.", "Date From", "Date to", "Total", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableG_out.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        TableG_out.setFocusable(false);
        TableG_out.setGridColor(new java.awt.Color(255, 255, 255));
        TableG_out.setMaximumSize(null);
        TableG_out.setRowHeight(30);
        TableG_out.setSelectionBackground(new java.awt.Color(54, 33, 89));
        TableG_out.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ScrollPaneB.setViewportView(TableG_out);
        if (TableG_out.getColumnModel().getColumnCount() > 0) {
            TableG_out.getColumnModel().getColumn(0).setMinWidth(40);
            TableG_out.getColumnModel().getColumn(0).setPreferredWidth(40);
            TableG_out.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        panelB.add(ScrollPaneB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 780, 300));

        service_number_labelB.setBackground(new java.awt.Color(255, 255, 255));
        service_number_labelB.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        service_number_labelB.setForeground(new java.awt.Color(51, 51, 51));
        service_number_labelB.setText("Army Number");
        panelB.add(service_number_labelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, -1, 40));

        service_numberB.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        service_numberB.setForeground(new java.awt.Color(54, 33, 89));
        service_numberB.setBorder(null);
        service_numberB.setMargin(new java.awt.Insets(2, 4, 2, 2));
        service_numberB.setSelectionColor(new java.awt.Color(204, 204, 255));
        service_numberB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                service_numberBKeyPressed(evt);
            }
        });
        panelB.add(service_numberB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 400, 40));

        textfield_underline.setForeground(new java.awt.Color(54, 33, 89));
        panelB.add(textfield_underline, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, 400, 10));

        okayB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PNGS/check-mark.png"))); // NOI18N
        okayB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okayBMouseClicked(evt);
            }
        });
        panelB.add(okayB, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, -1, 40));

        bg.add(panelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 192, 910, 480));

        ScrollPaneC.setBorder(null);
        ScrollPaneC.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        panelC.setBackground(new java.awt.Color(255, 255, 255));
        panelC.setFocusable(false);
        panelC.setMaximumSize(new java.awt.Dimension(950, 1310));
        panelC.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        service_number_labelC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        service_number_labelC.setForeground(new java.awt.Color(51, 51, 51));
        service_number_labelC.setText("Army Number");
        panelC.add(service_number_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, -1, 40));

        panelC_bottom_line.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(panelC_bottom_line, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 990, 910, -1));

        name_labelC.setBackground(new java.awt.Color(255, 255, 255));
        name_labelC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        name_labelC.setForeground(new java.awt.Color(51, 51, 51));
        name_labelC.setText("Name");
        panelC.add(name_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, -1, 40));

        army_numberC.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        army_numberC.setForeground(new java.awt.Color(54, 33, 89));
        army_numberC.setText("> XXXXXXX");
        panelC.add(army_numberC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, 40));

        rank_labelC.setBackground(new java.awt.Color(255, 255, 255));
        rank_labelC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        rank_labelC.setForeground(new java.awt.Color(51, 51, 51));
        rank_labelC.setText("Rank");
        panelC.add(rank_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, -1, 40));

        rankC.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        rankC.setForeground(new java.awt.Color(54, 33, 89));
        rankC.setText("> XXXXXXX");
        panelC.add(rankC, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 100, -1, 40));

        address_labelC.setBackground(new java.awt.Color(255, 255, 255));
        address_labelC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        address_labelC.setForeground(new java.awt.Color(51, 51, 51));
        address_labelC.setText("Cadre");
        panelC.add(address_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 380, -1, 50));

        PO_labelC.setBackground(new java.awt.Color(255, 255, 255));
        PO_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        PO_labelC.setForeground(new java.awt.Color(66, 50, 77));
        PO_labelC.setText("HAV");
        panelC.add(PO_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 440, -1, 40));

        teh_labelC.setBackground(new java.awt.Color(255, 255, 255));
        teh_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        teh_labelC.setForeground(new java.awt.Color(66, 50, 77));
        teh_labelC.setText("NB SUB");
        panelC.add(teh_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 440, -1, 40));

        vill_labelC.setBackground(new java.awt.Color(255, 255, 255));
        vill_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        vill_labelC.setForeground(new java.awt.Color(66, 50, 77));
        vill_labelC.setText("NK");
        panelC.add(vill_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 440, -1, 40));

        midC3.setForeground(new java.awt.Color(204, 204, 255));
        panelC.add(midC3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 405, 440, 10));

        marks_obtainedC.setBackground(new java.awt.Color(255, 255, 255));
        marks_obtainedC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        marks_obtainedC.setForeground(new java.awt.Color(51, 51, 51));
        marks_obtainedC.setText("Marks Obtained");
        panelC.add(marks_obtainedC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 570, -1, 50));

        slash7.setFont(new java.awt.Font("Roboto Bk", 0, 28)); // NOI18N
        slash7.setForeground(new java.awt.Color(54, 33, 89));
        slash7.setText("/");
        panelC.add(slash7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 680, 20, 30));

        firing_labelC.setBackground(new java.awt.Color(255, 255, 255));
        firing_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        firing_labelC.setForeground(new java.awt.Color(66, 50, 77));
        firing_labelC.setText("Firing");
        panelC.add(firing_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 630, -1, 40));

        drill_labelC.setBackground(new java.awt.Color(255, 255, 255));
        drill_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        drill_labelC.setForeground(new java.awt.Color(66, 50, 77));
        drill_labelC.setText("Drill");
        panelC.add(drill_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 630, -1, 40));

        BPET_labelC.setBackground(new java.awt.Color(255, 255, 255));
        BPET_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        BPET_labelC.setForeground(new java.awt.Color(66, 50, 77));
        BPET_labelC.setText("BPET");
        panelC.add(BPET_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 630, -1, 40));

        midA4.setForeground(new java.awt.Color(204, 204, 255));
        panelC.add(midA4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 595, 310, 10));

        bpet_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bpet_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        bpet_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bpet_textfieldC.setBorder(null);
        bpet_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(bpet_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 670, 70, 40));

        marks_underline13.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline13, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 710, 70, 20));

        bpet_max_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bpet_max_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        bpet_max_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bpet_max_textfieldC.setBorder(null);
        bpet_max_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(bpet_max_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 670, 70, 40));

        marks_underline14.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline14, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 710, 70, 20));

        slash8.setFont(new java.awt.Font("Roboto Bk", 0, 28)); // NOI18N
        slash8.setForeground(new java.awt.Color(54, 33, 89));
        slash8.setText("/");
        panelC.add(slash8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 680, 20, 30));

        firing_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        firing_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        firing_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firing_textfieldC.setBorder(null);
        firing_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(firing_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 670, 70, 40));

        marks_underline15.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline15, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 710, 70, 20));

        firing_max_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        firing_max_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        firing_max_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        firing_max_textfieldC.setBorder(null);
        firing_max_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(firing_max_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 670, 70, 40));

        marks_underline16.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline16, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 710, 70, 20));

        drill_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        drill_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        drill_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        drill_textfieldC.setBorder(null);
        drill_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(drill_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 670, 70, 40));

        marks_underline17.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline17, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 710, 70, 20));

        drill_max_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        drill_max_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        drill_max_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        drill_max_textfieldC.setBorder(null);
        drill_max_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(drill_max_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 670, 70, 40));

        marks_underline18.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline18, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 710, 70, 20));

        bfg_labelC.setBackground(new java.awt.Color(255, 255, 255));
        bfg_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        bfg_labelC.setForeground(new java.awt.Color(66, 50, 77));
        bfg_labelC.setText("Bfg");
        panelC.add(bfg_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 730, -1, 40));

        IPIT_labelC.setBackground(new java.awt.Color(255, 255, 255));
        IPIT_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        IPIT_labelC.setForeground(new java.awt.Color(66, 50, 77));
        IPIT_labelC.setText("IP/IT");
        panelC.add(IPIT_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 730, -1, 40));

        IPIT_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        IPIT_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        IPIT_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPIT_textfieldC.setBorder(null);
        IPIT_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(IPIT_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 770, 70, 40));

        marks_underline19.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline19, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 810, 70, 20));

        IPIT_max_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        IPIT_max_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        IPIT_max_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPIT_max_textfieldC.setBorder(null);
        IPIT_max_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(IPIT_max_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 770, 70, 40));

        marks_underline20.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline20, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 810, 70, 20));

        bfg_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bfg_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        bfg_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bfg_textfieldC.setBorder(null);
        bfg_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(bfg_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 770, 70, 40));

        marks_underline21.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline21, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 810, 70, 20));

        bfg_max_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        bfg_max_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        bfg_max_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        bfg_max_textfieldC.setBorder(null);
        bfg_max_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(bfg_max_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 770, 70, 40));

        marks_underline22.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline22, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 810, 70, 20));

        result_labelC.setBackground(new java.awt.Color(255, 255, 255));
        result_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        result_labelC.setForeground(new java.awt.Color(66, 50, 77));
        result_labelC.setText("Result");
        panelC.add(result_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 840, -1, 40));

        total_labelC.setBackground(new java.awt.Color(255, 255, 255));
        total_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        total_labelC.setForeground(new java.awt.Color(66, 50, 77));
        total_labelC.setText("Total Marks");
        panelC.add(total_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 730, -1, 40));

        total_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        total_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        total_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total_textfieldC.setBorder(null);
        total_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(total_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 770, 70, 40));

        marks_underline23.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline23, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 810, 70, 20));

        total_max_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        total_max_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        total_max_textfieldC.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        total_max_textfieldC.setBorder(null);
        total_max_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(total_max_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 770, 70, 40));

        marks_underline24.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(marks_underline24, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 810, 70, 20));

        result_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        result_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        result_textfieldC.setBorder(null);
        result_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(result_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 880, 170, 40));

        results_underline1.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(results_underline1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 920, 170, 20));

        remarks_labelC.setBackground(new java.awt.Color(255, 255, 255));
        remarks_labelC.setFont(new java.awt.Font("Montserrat", 0, 24)); // NOI18N
        remarks_labelC.setForeground(new java.awt.Color(66, 50, 77));
        remarks_labelC.setText("Remarks");
        panelC.add(remarks_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 840, -1, 40));

        remarks_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        remarks_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        remarks_textfieldC.setBorder(null);
        remarks_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        panelC.add(remarks_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 880, 440, 40));

        remarks_underline1.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(remarks_underline1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 920, 440, 20));

        NK_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        NK_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        NK_textfieldC.setBorder(null);
        NK_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        NK_textfieldC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NK_textfieldCActionPerformed(evt);
            }
        });
        panelC.add(NK_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 480, 210, 40));

        cadre_underline4.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(cadre_underline4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 520, 210, 20));

        HAV_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        HAV_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        HAV_textfieldC.setBorder(null);
        HAV_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        HAV_textfieldC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HAV_textfieldCActionPerformed(evt);
            }
        });
        panelC.add(HAV_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 480, 210, 40));

        cadre_underline5.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(cadre_underline5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 520, 210, 20));

        NB_SUB_textfieldC.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        NB_SUB_textfieldC.setForeground(new java.awt.Color(54, 33, 89));
        NB_SUB_textfieldC.setBorder(null);
        NB_SUB_textfieldC.setMargin(new java.awt.Insets(2, 4, 2, 2));
        NB_SUB_textfieldC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NB_SUB_textfieldCActionPerformed(evt);
            }
        });
        panelC.add(NB_SUB_textfieldC, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 480, 210, 40));

        cadre_underline6.setForeground(new java.awt.Color(54, 33, 89));
        panelC.add(cadre_underline6, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 520, 210, 20));

        slash9.setFont(new java.awt.Font("Roboto Bk", 0, 28)); // NOI18N
        slash9.setForeground(new java.awt.Color(54, 33, 89));
        slash9.setText("/");
        panelC.add(slash9, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 680, 20, 30));

        slash10.setFont(new java.awt.Font("Roboto Bk", 0, 28)); // NOI18N
        slash10.setForeground(new java.awt.Color(54, 33, 89));
        slash10.setText("/");
        panelC.add(slash10, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 780, 20, 30));

        slash11.setFont(new java.awt.Font("Roboto Bk", 0, 28)); // NOI18N
        slash11.setForeground(new java.awt.Color(54, 33, 89));
        slash11.setText("/");
        panelC.add(slash11, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 780, 20, 30));

        slash12.setFont(new java.awt.Font("Roboto Bk", 0, 28)); // NOI18N
        slash12.setForeground(new java.awt.Color(54, 33, 89));
        slash12.setText("/");
        panelC.add(slash12, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 780, 20, 30));

        nameC.setFont(new java.awt.Font("Roboto Bk", 0, 24)); // NOI18N
        nameC.setForeground(new java.awt.Color(54, 33, 89));
        nameC.setText("> XXXXXXX");
        panelC.add(nameC, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, -1, 40));

        midC4.setForeground(new java.awt.Color(204, 204, 255));
        midC4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        panelC.add(midC4, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 85, 20, 40));

        changing_for_label.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        changing_for_label.setText("Changing For");
        panelC.add(changing_for_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, -1, 20));

        midC0.setForeground(new java.awt.Color(204, 204, 255));
        panelC.add(midC0, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, 390, 10));

        from_labelC.setBackground(new java.awt.Color(255, 255, 255));
        from_labelC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        from_labelC.setForeground(new java.awt.Color(51, 51, 51));
        from_labelC.setText("From");
        panelC.add(from_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, -1, 40));

        to_labelC.setBackground(new java.awt.Color(255, 255, 255));
        to_labelC.setFont(new java.awt.Font("Montserrat", 0, 28)); // NOI18N
        to_labelC.setForeground(new java.awt.Color(51, 51, 51));
        to_labelC.setText("To");
        panelC.add(to_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, -1, 40));

        from_date_comboboxC.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        from_date_comboboxC.setForeground(new java.awt.Color(44, 62, 80));
        from_date_comboboxC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DD", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        from_date_comboboxC.setBorder(null);
        panelC.add(from_date_comboboxC, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 100, 40));

        from_month_comboboxC.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        from_month_comboboxC.setForeground(new java.awt.Color(44, 62, 80));
        from_month_comboboxC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MM", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        from_month_comboboxC.setBorder(null);
        panelC.add(from_month_comboboxC, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, 100, 40));

        from_year_comboboxC.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        from_year_comboboxC.setForeground(new java.awt.Color(44, 62, 80));
        from_year_comboboxC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YYYY", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099", "2100", " " }));
        from_year_comboboxC.setBorder(null);
        panelC.add(from_year_comboboxC, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 290, 100, 40));

        to_date_comboboxC.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        to_date_comboboxC.setForeground(new java.awt.Color(44, 62, 80));
        to_date_comboboxC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DD", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        to_date_comboboxC.setBorder(null);
        panelC.add(to_date_comboboxC, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 290, 100, 40));

        to_month_comboboxC.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        to_month_comboboxC.setForeground(new java.awt.Color(44, 62, 80));
        to_month_comboboxC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MM", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));
        to_month_comboboxC.setBorder(null);
        panelC.add(to_month_comboboxC, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 290, 100, 40));

        to_year_comboboxC.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        to_year_comboboxC.setForeground(new java.awt.Color(44, 62, 80));
        to_year_comboboxC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YYYY", "1950", "1951", "1952", "1953", "1954", "1955", "1956", "1957", "1958", "1959", "1960", "1961", "1962", "1963", "1964", "1965", "1966", "1967", "1968", "1969", "1970", "1971", "1972", "1973", "1974", "1975", "1976", "1977", "1978", "1979", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099", "2100", " " }));
        to_year_comboboxC.setBorder(null);
        panelC.add(to_year_comboboxC, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 290, 100, 40));

        ScrollPaneC.setViewportView(panelC);

        bg.add(ScrollPaneC, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 192, 910, 480));

        print_buttonA.setForeground(new java.awt.Color(240, 240, 240));
        print_buttonA.setMaximumSize(new java.awt.Dimension(95, 25));
        print_buttonA.setMinimumSize(new java.awt.Dimension(95, 25));
        print_buttonA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                print_buttonAMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                print_buttonAMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                print_buttonAMouseExited(evt);
            }
        });
        print_buttonA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        print_label.setBackground(new java.awt.Color(54, 33, 89));
        print_label.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        print_label.setForeground(new java.awt.Color(54, 33, 89));
        print_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        print_label.setText("PRINT");
        print_label.setFocusable(false);
        print_label.setRequestFocusEnabled(false);
        print_label.setVerifyInputWhenFocusTarget(false);
        print_buttonA.add(print_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 0, 71, 50));

        bg.add(print_buttonA, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 120, 180, 50));

        insert_buttonA.setForeground(new java.awt.Color(240, 240, 240));
        insert_buttonA.setMaximumSize(new java.awt.Dimension(95, 25));
        insert_buttonA.setMinimumSize(new java.awt.Dimension(95, 25));
        insert_buttonA.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                insert_buttonAMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                insert_buttonAMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                insert_buttonAMouseExited(evt);
            }
        });
        insert_buttonA.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        insert_label.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        insert_label.setForeground(new java.awt.Color(54, 33, 89));
        insert_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        insert_label.setText("INSERT");
        insert_buttonA.add(insert_label, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 13, 71, 24));

        bg.add(insert_buttonA, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 120, 180, 50));

        edit_buttonB.setForeground(new java.awt.Color(240, 240, 240));
        edit_buttonB.setMaximumSize(new java.awt.Dimension(200, 200));
        edit_buttonB.setMinimumSize(new java.awt.Dimension(200, 200));
        edit_buttonB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edit_buttonBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                edit_buttonBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                edit_buttonBMouseExited(evt);
            }
        });
        edit_buttonB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        edit_labelB.setBackground(new java.awt.Color(54, 33, 89));
        edit_labelB.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        edit_labelB.setForeground(new java.awt.Color(54, 33, 89));
        edit_labelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        edit_labelB.setText("EDIT");
        edit_buttonB.add(edit_labelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 80, 50));

        bg.add(edit_buttonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 120, 180, 50));

        refresh_buttonB.setForeground(new java.awt.Color(240, 240, 240));
        refresh_buttonB.setMaximumSize(new java.awt.Dimension(200, 200));
        refresh_buttonB.setMinimumSize(new java.awt.Dimension(200, 200));
        refresh_buttonB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refresh_buttonBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refresh_buttonBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refresh_buttonBMouseExited(evt);
            }
        });
        refresh_buttonB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        refresh_labelB.setBackground(new java.awt.Color(54, 33, 89));
        refresh_labelB.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        refresh_labelB.setForeground(new java.awt.Color(54, 33, 89));
        refresh_labelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        refresh_labelB.setText("REFRESH");
        refresh_buttonB.add(refresh_labelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 80, 50));

        bg.add(refresh_buttonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 120, 180, 50));

        print_buttonB.setForeground(new java.awt.Color(240, 240, 240));
        print_buttonB.setMaximumSize(new java.awt.Dimension(200, 200));
        print_buttonB.setMinimumSize(new java.awt.Dimension(200, 200));
        print_buttonB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                print_buttonBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                print_buttonBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                print_buttonBMouseExited(evt);
            }
        });
        print_buttonB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        print_labelB.setBackground(new java.awt.Color(54, 33, 89));
        print_labelB.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        print_labelB.setForeground(new java.awt.Color(54, 33, 89));
        print_labelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        print_labelB.setText("PRINT");
        print_buttonB.add(print_labelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 80, 50));

        bg.add(print_buttonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 180, 50));

        update_buttonC.setForeground(new java.awt.Color(240, 240, 240));
        update_buttonC.setMaximumSize(new java.awt.Dimension(200, 200));
        update_buttonC.setMinimumSize(new java.awt.Dimension(200, 200));
        update_buttonC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update_buttonCMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                update_buttonCMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                update_buttonCMouseExited(evt);
            }
        });
        update_buttonC.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        update_labelC.setBackground(new java.awt.Color(54, 33, 89));
        update_labelC.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        update_labelC.setForeground(new java.awt.Color(54, 33, 89));
        update_labelC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        update_labelC.setText("UPDATE");
        update_buttonC.add(update_labelC, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 120, 50));

        bg.add(update_buttonC, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 120, 180, 50));

        fullscreen_buttonB.setForeground(new java.awt.Color(240, 240, 240));
        fullscreen_buttonB.setMaximumSize(new java.awt.Dimension(200, 200));
        fullscreen_buttonB.setMinimumSize(new java.awt.Dimension(200, 200));
        fullscreen_buttonB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fullscreen_buttonBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fullscreen_buttonBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fullscreen_buttonBMouseExited(evt);
            }
        });
        fullscreen_buttonB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fullscreen_labelB.setBackground(new java.awt.Color(54, 33, 89));
        fullscreen_labelB.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        fullscreen_labelB.setForeground(new java.awt.Color(54, 33, 89));
        fullscreen_labelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fullscreen_labelB.setText("FULLSCREEN");
        fullscreen_buttonB.add(fullscreen_labelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 120, 50));

        bg.add(fullscreen_buttonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 120, 180, -1));

        getContentPane().add(bg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        fullscreen_panelB.setBackground(new java.awt.Color(255, 255, 255));
        fullscreen_panelB.setMaximumSize(new java.awt.Dimension(1280, 720));
        fullscreen_panelB.setMinimumSize(new java.awt.Dimension(1280, 720));
        fullscreen_panelB.setPreferredSize(new java.awt.Dimension(1280, 720));
        fullscreen_panelB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        fullscreen_ScrollPaneB.setBackground(new java.awt.Color(255, 255, 255));
        fullscreen_ScrollPaneB.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        fullscreen_tableB.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        fullscreen_tableB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S. No.", "Army No.", "Date From", "Date to", "NK", "HAV", "NB_SUB", "BPET", "Firing", "Drill", "IP/IT", "BFG", "Total", "Result", "Remarks"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fullscreen_tableB.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        fullscreen_tableB.setFocusable(false);
        fullscreen_tableB.setGridColor(new java.awt.Color(255, 255, 255));
        fullscreen_tableB.setRowHeight(30);
        fullscreen_tableB.setSelectionBackground(new java.awt.Color(54, 33, 89));
        fullscreen_ScrollPaneB.setViewportView(fullscreen_tableB);
        if (fullscreen_tableB.getColumnModel().getColumnCount() > 0) {
            fullscreen_tableB.getColumnModel().getColumn(0).setMinWidth(40);
            fullscreen_tableB.getColumnModel().getColumn(0).setPreferredWidth(40);
            fullscreen_tableB.getColumnModel().getColumn(0).setMaxWidth(40);
            fullscreen_tableB.getColumnModel().getColumn(1).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(1).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(1).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(2).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(2).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(2).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(3).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(3).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(3).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(4).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(4).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(4).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(5).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(5).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(5).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(6).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(6).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(6).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(7).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(7).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(7).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(8).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(8).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(8).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(9).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(9).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(9).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(10).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(10).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(10).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(11).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(11).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(11).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(12).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(12).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(12).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(13).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(13).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(13).setMaxWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(14).setMinWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(14).setPreferredWidth(150);
            fullscreen_tableB.getColumnModel().getColumn(14).setMaxWidth(150);
        }

        fullscreen_panelB.add(fullscreen_ScrollPaneB, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 1200, 580));

        exit_fullscreen_buttonB.setForeground(new java.awt.Color(240, 240, 240));
        exit_fullscreen_buttonB.setMaximumSize(new java.awt.Dimension(200, 200));
        exit_fullscreen_buttonB.setMinimumSize(new java.awt.Dimension(200, 200));
        exit_fullscreen_buttonB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exit_fullscreen_buttonBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exit_fullscreen_buttonBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exit_fullscreen_buttonBMouseExited(evt);
            }
        });
        exit_fullscreen_buttonB.setLayout(null);

        exit_fullscreen_labelB.setBackground(new java.awt.Color(54, 33, 89));
        exit_fullscreen_labelB.setFont(new java.awt.Font("Roboto Bk", 0, 14)); // NOI18N
        exit_fullscreen_labelB.setForeground(new java.awt.Color(54, 33, 89));
        exit_fullscreen_labelB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exit_fullscreen_labelB.setText("GO BACK");
        exit_fullscreen_buttonB.add(exit_fullscreen_labelB);
        exit_fullscreen_labelB.setBounds(30, 0, 120, 50);

        fullscreen_panelB.add(exit_fullscreen_buttonB, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 640, 180, 50));

        getContentPane().add(fullscreen_panelB, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void printRecord(JPanel panel){
        // Create PrinterJob Here
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        // Set Printer Job Name
        printerJob.setJobName("Print Record");
        // Set Printable
        printerJob.setPrintable(new Printable() {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                // Check If No Printable Content
                if(pageIndex > 0){
                    return Printable.NO_SUCH_PAGE;
                }
                
                // Make 2D Graphics to map content
                Graphics2D graphics2D = (Graphics2D)graphics;
                graphics2D.translate(pageFormat.getImageableX()+10, pageFormat.getImageableY()+10);
                graphics2D.scale(0.68,0.7);
                
                // Now paint panel as graphics2D
                panel.paint(graphics2D);
                
                // return if page exists
                return Printable.PAGE_EXISTS;
            }
        });
        // Store printerDialog as boolean
        boolean returningResult = printerJob.printDialog();
        // check if dilog is showing
        if(returningResult){
            // Use try catch exeption for failure
            try{
                // Now call print method inside printerJob to print
                printerJob.print();
            }catch (PrinterException printerException){
                JOptionPane.showMessageDialog(this, "Print Error: " + printerException.getMessage());
            }
        }}
    
    private void viewall(String a){
        try{
            ResultSet rs = null;
            int i = 0;
            if(a.equals("null")){
            rs = s.executeQuery("Select * from cadre;");
            rs.next();
            }
            
            else{
                rs = s.executeQuery("Select * from cadre where Army_no = '"+a+"';");
                if(rs.next() == false){
                    i = 1;
                    JOptionPane.showMessageDialog(null, "Army Number not found.");
                }
            }
            String service_no, dof, dot, nk, hav, nb, bpet, firing, drill, ipit, bfg, total, result, remarks;
            model_table.setRowCount(0);
            model_fullscreen.setRowCount(0);
            //int row = 0;
            i = 1;
            
            do{
//                row = row + 30;
//                Table.setPreferredSize(new java.awt.Dimension(300,row));
//                fullscreen_table.setPreferredSize(new java.awt.Dimension(300,row));
                service_no=rs.getString("Army_no");                
                dof=rs.getString("Date_from");                
                dot=rs.getString("date_to");
                nk=rs.getString("cadre_NK");
                hav=rs.getString("HAV");
                nb=rs.getString("NB_SUB");
                bpet=rs.getString("BPET");
                firing=rs.getString("firing");
                drill=rs.getString("drill");
                ipit=rs.getString("ipit");
                bfg=rs.getString("bfg");
                total=rs.getString("total");
                result=rs.getString("result");
                remarks=rs.getString("remarks");
                model_table.addRow(new Object[]{
                   i,
                   service_no, 
                   dof,
                   dot,
                   total,
                   result
                });
                 model_fullscreen.addRow( new Object[]{
                   i,
                   service_no, 
                   dof,
                   dot,
                   nk, 
                   hav,
                   nb,
                   bpet,
                   firing,
                   drill,
                   ipit,
                   bfg,
                   total,
                   result,
                   remarks
                });
            i++;
            } while(rs.next());
        }catch(Exception e){System.out.println(e);}   
    }
    
    private void exit_iconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_iconMouseClicked
        int confirmed = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit the program?", "Exit Program", JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            dispose();
            try {
                c.close();
            } catch (SQLException ex) {
                System.out.println("connection ended");
            }
        }
    }//GEN-LAST:event_exit_iconMouseClicked

    private void minimizeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeMouseClicked
        setState(this.ICONIFIED);
    }//GEN-LAST:event_minimizeMouseClicked

    private void go_back_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_go_back_labelMouseClicked
        if(flag){
        new Modules(0).setVisible(true);
        this.setVisible(false);
        flag = false;
        }

    }//GEN-LAST:event_go_back_labelMouseClicked

    private void menuAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAMouseClicked
        menuA.setBackground(new java.awt.Color(85,65,118));
        menuB.setBackground(new java.awt.Color(64,43,100));
        
        print_buttonA.setVisible(true);
        insert_buttonA.setVisible(true);
        print_buttonB.setVisible(false);
        edit_buttonB.setVisible(false);
        refresh_buttonB.setVisible(false);
        fullscreen_buttonB.setVisible(false);
        
        ScrollPaneA.setVisible(true);
        panelB.setVisible(false);
        ScrollPaneC.setVisible(false);
        fullscreen_panelB.setVisible(false);
    }//GEN-LAST:event_menuAMouseClicked

    private void NK_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NK_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NK_textfieldActionPerformed

    private void HAV_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HAV_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HAV_textfieldActionPerformed

    private void NB_SUB_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NB_SUB_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NB_SUB_textfieldActionPerformed

    private void menuBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuBMouseClicked
        menuB.setBackground(new java.awt.Color(85,65,118));
        menuA.setBackground(new java.awt.Color(64,43,100));
        
        print_buttonA.setVisible(false);
        insert_buttonA.setVisible(false);
        print_buttonB.setVisible(true);
        edit_buttonB.setVisible(true);
        refresh_buttonB.setVisible(true);
        fullscreen_buttonB.setVisible(true);
        update_buttonC.setVisible(false);
        
        ScrollPaneA.setVisible(false);
        panelB.setVisible(true);
        ScrollPaneC.setVisible(false);
        fullscreen_panelB.setVisible(false);
        
         viewall("null");
    }//GEN-LAST:event_menuBMouseClicked

    private void okayBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okayBMouseClicked
        if((service_numberB.getText()!=null && !service_numberB.getText().trim().isEmpty()) ){
            viewall(service_numberB.getText());
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Enter Army Number.");
        }
    }//GEN-LAST:event_okayBMouseClicked

    private void NB_SUB_textfieldCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NB_SUB_textfieldCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NB_SUB_textfieldCActionPerformed

    private void HAV_textfieldCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HAV_textfieldCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HAV_textfieldCActionPerformed

    private void NK_textfieldCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NK_textfieldCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NK_textfieldCActionPerformed

    private void okayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okayMouseClicked
        if(service_number_textfield.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please Enter Army Number");
            name.setText("> XXXXXXX");
            rank.setText("> XXXXXXX");
            trade.setText("> XXXXXXX");
            company.setText("> XXXXXXX");
            unit.setText("> XXXXXXX");
            unit_label.setText("Unit");
            trade_label.setText("Trade");
            service_number_textfield.setText("");
        }
        else{
        try {
            // TODO add your handling code here:
            String query1 = "select * from new_registration where service_no = '"+service_number_textfield.getText()+"' ;";
            ResultSet rs    = s.executeQuery(query1); // Retrieving last stored password in database
             // Retrieving last stored password in database
             int i = 0;
            if(rs.next() == false){
                i = 1;
            }
            if(i==1){
            query1 = "select * from attach_in where Service_no = '"+service_number_textfield.getText()+"' ;";
            ResultSet rs1    = s.executeQuery(query1);
            
                if(rs1.next() == false){
                i = 2;
            }
            }
            if(i==2){
                query1 = "select * from post_in where Service_no = '"+service_number_textfield.getText()+"' ;";
                ResultSet rs1    = s.executeQuery(query1);
                if(rs1.next() ==false){
                i=3;
                JOptionPane.showMessageDialog(rootPane, "Invalid Army Number");
                service_number_textfield.setText("");
                name.setText("> XXXXXXX");
                rank.setText("> XXXXXXX");
                trade.setText("> XXXXXXX");
                company.setText("> XXXXXXX");
                unit.setText("> XXXXXXX");
                unit_label.setText("Unit");
                trade_label.setText("Trade");
                service_number_textfield.setText("");
                }
            }
            if(i!=3){
                String[] r = new String[5];
                if(i==1){
                    query1 = "select * from attach_in where Service_no = '"+service_number_textfield.getText()+"' ;";
                    ResultSet rs1    = s.executeQuery(query1); 
                    while(rs1.next()){
                        r[0] = rs1.getString("name");
                        r[1] = rs1.getString("rank_");
                        r[2] = rs1.getString("trade");
                        r[3] = rs1.getString("company");
                        r[4] = rs1.getString("unit");
                    }
                name.setText(r[0]);
                rank.setText(r[1]);
                trade.setText(r[2]);
                company.setText(r[3]);
                unit.setText(r[4]);
                }
                if(i==2){
                    query1 = "select * from post_in where Service_no = '"+service_number_textfield.getText()+"' ;";
                    ResultSet rs1    = s.executeQuery(query1); 
                    while(rs1.next()){
                        r[0] = rs1.getString("name");
                        r[1] = rs1.getString("rank_");
                        r[3] = rs1.getString("company");
                    }
                name.setText(r[0]);
                rank.setText(r[1]);
                trade.setText("> XXXXXXX");
                company.setText(r[3]);
                unit.setText("> XXXXXXX");
                }
                else if(i==0){
                query1 = "select * from new_registration where service_no = '"+service_number_textfield.getText()+"' ;";
                    rs    = s.executeQuery(query1);
                while(rs.next()){
                    r[0] = rs.getString("name");
                    r[1] = rs.getString("rank_");
                    r[2] = rs.getString("company");
                }
                name.setText(r[0]);
                rank.setText(r[1]);
                trade.setText("> XXXXXXX");
                company.setText(r[2]);
                unit.setText("> XXXXXXX");
                } 
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Update_data.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_okayMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //for a centered frame
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        //for a centered frame
        
        menuA.setBackground(new java.awt.Color(85,65,118));
        menuB.setBackground(new java.awt.Color(64,43,100));
        
        print_buttonA.setVisible(true);
        insert_buttonA.setVisible(true);
        print_buttonB.setVisible(false);
        edit_buttonB.setVisible(false);
        refresh_buttonB.setVisible(false);
        fullscreen_buttonB.setVisible(false);
        
        ScrollPaneA.setVisible(true);
        panelB.setVisible(false);
        ScrollPaneC.setVisible(false);
        fullscreen_panelB.setVisible(false);        
        viewall("null");
    }//GEN-LAST:event_formWindowOpened

    private void print_buttonAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_buttonAMouseClicked
        title_label.grabFocus();
        printRecord(panelA);
    }//GEN-LAST:event_print_buttonAMouseClicked

    private void print_buttonAMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_buttonAMouseEntered
        print_buttonA.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_print_buttonAMouseEntered

    private void print_buttonAMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_buttonAMouseExited
        print_buttonA.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_print_buttonAMouseExited

    private void print_buttonBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_buttonBMouseClicked
        /*try{
            path_file path = new path_file();
            PrintWriter pw=new PrintWriter(new File(path.csv+"\\cadre.csv"));
            StringBuilder sb=new StringBuilder();
            String query="Select * from cadre";
            
            sb.append("Army Number     \t");
            sb.append(",");
            sb.append("Date From            \t");
            sb.append(",");
            sb.append("Date To             \t");
            sb.append(",");
            sb.append("NK          \t");
            sb.append(",");
            sb.append("HAV        \t");
            sb.append(",");
            sb.append("NB SUB      \t");
            sb.append(",");
            sb.append("BPET      \t");
            sb.append(",");
            sb.append("Firing      \t");
            sb.append(",");
            sb.append("Drill      \t");
            sb.append(",");
            sb.append("IPIT     \t");
            sb.append(",");
            sb.append("BFG      \t");
            sb.append(",");
            sb.append("Total      \t");
            sb.append(",");
            sb.append("Result      \t");
            sb.append(",");
            sb.append("Remarks      \t");
            
            sb.append("\r\n");
            ResultSet rs = null;
            Statement st = c.createStatement();
            rs=st.executeQuery(query);  
            
            while(rs.next()){
                sb.append(rs.getString("Army_no"));
                sb.append(",");
                sb.append(rs.getString("Date_from"));
                sb.append(",");
                sb.append(rs.getString("Date_to"));
                sb.append(",");
                sb.append(rs.getString("cadre_NK"));
                sb.append(",");
                sb.append(rs.getString("HAV"));
                sb.append(",");
                sb.append(rs.getString("NB_SUB"));
                sb.append(",");
                sb.append(rs.getString("BPET"));
                sb.append(",");
                sb.append(rs.getString("firing"));
                sb.append(",");
                sb.append(rs.getString("drill"));
                sb.append(",");
                sb.append(rs.getString("ipit"));
                sb.append(",");
                sb.append(rs.getString("bfg"));
                sb.append(",");
                sb.append(rs.getString("total"));
                sb.append(",");
                sb.append(rs.getString("result"));
                sb.append(",");
                sb.append(rs.getString("remarks"));
                
                sb.append("\r\n");
            }
            pw.write(sb.toString());
            pw.close();
            JOptionPane.showMessageDialog(null,"Successfully Converted to CSV");
        }
        catch(Exception e){
            System.out.print("\n"+e);
            String er=e.getMessage();
            if(er.contains("The process cannot access the file because it is being used by another process")){
                JOptionPane.showMessageDialog(null,"Please close the CSV file first!");
            }
        }*/
        try{

        Statement statement = c.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from cadre");
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet =null;
            spreadsheet = workbook.createSheet("cadre");
            
            XSSFRow row = spreadsheet.createRow(0);
            XSSFCell cell;
            cell = row.createCell(0);
            cell.setCellValue("Army Number");
            cell = row.createCell(1);
            cell.setCellValue("Date From");
            cell = row.createCell(2);
            cell.setCellValue("Date To");
            cell = row.createCell(3);
            cell.setCellValue("NK");
            cell = row.createCell(4);
            cell.setCellValue("HAV");
            cell = row.createCell(5);
            cell.setCellValue("NB SUB");
            cell = row.createCell(6);
            cell.setCellValue("BPET");
            cell = row.createCell(7);
            cell.setCellValue("Firing");
            cell = row.createCell(8);
            cell.setCellValue("Drill");
            cell = row.createCell(9);
            cell.setCellValue("IPIT");
            cell = row.createCell(10);
            cell.setCellValue("BFG");
            cell = row.createCell(11);
            cell.setCellValue("Total");
            cell = row.createCell(12);
            cell.setCellValue("Result");
            cell = row.createCell(13);
            cell.setCellValue("Remarks");
            int i = 1;
            
            while(resultSet.next()) {
                row = spreadsheet.createRow(i);
                cell = row.createCell(0);
                cell.setCellValue(resultSet.getString("army_no"));
                cell = row.createCell(1);
                cell.setCellValue(resultSet.getString("date_from"));
                cell = row.createCell(2);
                cell.setCellValue(resultSet.getString("date_to"));
                cell = row.createCell(3);
                cell.setCellValue(resultSet.getString("cadre_nk"));
                cell = row.createCell(4);
                cell.setCellValue(resultSet.getString("hav"));
                cell = row.createCell(5);
                cell.setCellValue(resultSet.getString("nb_sub"));
                cell = row.createCell(6);
                cell.setCellValue(resultSet.getString("bpet"));
                cell = row.createCell(7);
                cell.setCellValue(resultSet.getString("firing"));
                cell = row.createCell(8);
                cell.setCellValue(resultSet.getString("drill"));
                cell = row.createCell(9);
                cell.setCellValue(resultSet.getString("ipit"));
                cell = row.createCell(10);
                cell.setCellValue(resultSet.getString("bfg"));
                cell = row.createCell(11);
                cell.setCellValue(resultSet.getString("total"));
                cell = row.createCell(12);
                cell.setCellValue(resultSet.getString("result"));
                cell = row.createCell(13);
                cell.setCellValue(resultSet.getString("remarks"));
                i++;
            }
            path_file paths=new path_file();
            FileOutputStream out = new FileOutputStream(new File(paths.csv + "\\" +"Cadre.xlsx"));
            workbook.write(out);
            JOptionPane.showMessageDialog(null,"Cadre.xlsx written successfully");
            Desktop.getDesktop().open(new File(paths.csv + "/cadre.xlsx"));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,"Cadre.xlsx not created");
        }
    }//GEN-LAST:event_print_buttonBMouseClicked

    private void print_buttonBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_buttonBMouseEntered
        print_buttonB.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_print_buttonBMouseEntered

    private void print_buttonBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_buttonBMouseExited
        print_buttonB.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_print_buttonBMouseExited

    private void insert_buttonAMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insert_buttonAMouseClicked
        String sno = service_number_textfield.getText();
       // PreparedStatement  st   = null;
        if(sno==null || sno.trim().isEmpty()){
            JOptionPane.showMessageDialog(null,"No Army Number found");
            name.setText("> XXXXXXX");
            rank.setText("> XXXXXXX");
            trade.setText("> XXXXXXX");
            company.setText("> XXXXXXX");
            unit.setText("> XXXXXXX");
            unit_label.setText("Unit");
            trade_label.setText("Trade");
            service_number_textfield.setText("");
        }
        else{
        
            try{
                String nk =NK_textfield.getText();
                //date of test
                String year = (String)from_year_combobox.getSelectedItem();
                String month = (String)from_month_combobox.getSelectedItem();
                String date = (String)from_date_combobox.getSelectedItem();
                String date_of_from = date+"-"+month+"-"+year;
                
                
                String year1 = (String)to_year_combobox.getSelectedItem();
                String month1 = (String)to_month_combobox.getSelectedItem();
                String date1 = (String)to_date_combobox.getSelectedItem();
                String date_of_to = date1+"-"+month1+"-"+year1;
                
                
                String hav = HAV_textfield.getText();
                String nb = NB_SUB_textfield.getText();
                String remarks = remarks_textfield.getText();
                String result = result_textfield.getText();
                String bpet = bpet_textfield.getText();
                String bpet_max = bpet_max_textfield.getText();
                String fire = firing_textfield.getText();
                String fire_max = firing_max_textfield.getText();
                String drill = drill_textfield.getText();
                String drill_max = drill_max_textfield.getText();
                String IPIT = IPIT_textfield.getText();
                String IPIT_max = IPIT_max_textfield.getText();
                String bfg = bfg_textfield.getText();
                String bfg_max = bfg_max_textfield.getText();
                String total = total_textfield.getText();
                String total_max = total_max_textfield.getText();
                
                String err ="";
                boolean attach= true;
                Statement check = c.createStatement();
                String cheker = "Select count(*) as count from attach_in where Service_no = '"+sno+"'";
                String cheker2 = "Select count(*) as count from new_registration where service_no = '"+sno+"'";
                String cheker3 = "Select count(*) as count from post_in where Service_no = '"+sno+"'";
                ResultSet rs = check.executeQuery(cheker);
                int count = 0;
                int count2 = 0;
                int count3 = 0;
                
               // stmt.executeUpdate(xx);
                
                if(rs.next()){
                    count = rs.getInt("count");
                }
      
                rs= check.executeQuery(cheker2);
                if(rs.next()){
                    count2 = rs.getInt("count");
                }
         
                rs= check.executeQuery(cheker3);
                if(rs.next()){
                    count3 = rs.getInt("count");
                }
                String[] r = new String[5];
                if(count != 0){
                    String query1 = "select * from attach_in where Service_no = '"+service_number_textfield.getText()+"' ;";
                    ResultSet rs1    = s.executeQuery(query1); 
                    while(rs1.next()){
                        r[0] = rs1.getString("name");
                        r[1] = rs1.getString("rank_");
                        r[2] = rs1.getString("trade");
                        r[3] = rs1.getString("company");
                        r[4] = rs1.getString("unit");
                    }
                name.setText(r[0]);
                rank.setText(r[1]);
                trade.setText(r[2]);
                company.setText(r[3]);
                unit.setText(r[4]);
                }
                if(count2 != 0){
                    String query1 = "select * from new_registration where service_no = '"+service_number_textfield.getText()+"' ;";
                    ResultSet rs1    = s.executeQuery(query1); 
                    while(rs1.next()){
                        r[0] = rs1.getString("name");
                        r[1] = rs1.getString("rank_");
                        r[3] = rs1.getString("company");
                    }
                name.setText(r[0]);
                rank.setText(r[1]);
                trade.setText("> XXXXXXX");
                company.setText(r[3]);
                unit.setText("> XXXXXXX");
                }
                if(count3 != 0){
                     String query1 = "select * from post_in where Service_no = '"+service_number_textfield.getText()+"' ;";
                    ResultSet rs1    = s.executeQuery(query1); 
                    while(rs1.next()){
                        r[0] = rs1.getString("name");
                        r[1] = rs1.getString("rank_");
                        r[3] = rs1.getString("company");
                    }
                name.setText(r[0]);
                rank.setText(r[1]);
                trade.setText("> XXXXXXX");
                company.setText(r[3]);
                unit.setText("> XXXXXXX");
                }
                if(count==0 && count2==0 && count3 == 0){
                    JOptionPane.showMessageDialog(null,"Invalid Army Number");
                    name.setText("> XXXXXXX");
                    rank.setText("> XXXXXXX");
                    trade.setText("> XXXXXXX");
                    company.setText("> XXXXXXX");
                    unit.setText("> XXXXXXX");
                    unit_label.setText("Unit");
                    trade_label.setText("Trade");
                    service_number_textfield.setText("");
                }
          
                if(count!=0 || count2!=0 || count3 !=0){
                    boolean cal = false;
                    boolean cal1 = false;
                    boolean da = year!= "YYYY" && year1!= "YYYY" && month!= "MM" && month1!= "MM" && date!= "DD" && date1!= "DD";
                    if(da){
                    int y = Integer.parseInt(year);
                    int m = Integer.parseInt(month);
                    int d = Integer.parseInt(date);
                    int y1 = Integer.parseInt(year1);
                    int m1 = Integer.parseInt(month1);
                    int d1 = Integer.parseInt(date1);
                    cal = !((y%4==0 && m==2 &&  (d>29)  )   || (  (m==2 || m==4 || m==6 || m==9 || m==11)  && d==31  )    ||  (m==2 && d>28 && y%4!=0));
                    cal1 = !((y1%4==0 && m1==2 &&  (d1>29)  )   || (  (m1==2 || m1==4 || m1==6 || m1==9 || m1==11)  && d1==31  )    ||  (m1==2 && d1>28 && y1%4!=0));
                    }
                    boolean all_check= (nk!=null && !nk.trim().isEmpty())&& (hav!=null && !hav.trim().isEmpty())&& (nb!=null && !nb.trim().isEmpty())&&(remarks!=null && !remarks.trim().isEmpty())&&(result!=null && !result.trim().isEmpty())&&(bpet!=null && !bpet.trim().isEmpty())&&(bpet_max!=null && !bpet_max.trim().isEmpty()) &&(fire!=null && !fire.trim().isEmpty()) &&(fire_max!=null && !fire_max.trim().isEmpty()) &&(drill!=null && !drill.trim().isEmpty()) &&(drill_max!=null && !drill_max.trim().isEmpty()) &&(IPIT!=null && !IPIT.trim().isEmpty()) &&(IPIT_max!=null && !IPIT_max.trim().isEmpty()) &&(bfg!=null && !bfg.trim().isEmpty()) &&(bfg_max!=null && !bfg_max.trim().isEmpty()) &&(total!=null && !total.trim().isEmpty()) &&(total_max!=null && !total_max.trim().isEmpty());
                    
                    if(cal == true && cal1 == true && all_check == true){
             
                        boolean a = bpet.trim().matches("[0-9]+") && bpet_max.trim().matches("[0-9]+") && fire.trim().matches("[0-9]+") && fire_max.trim().matches("[0-9]+") && drill.trim().matches("[0-9]+") && drill_max.trim().matches("[0-9]+") && IPIT.trim().matches("[0-9]+") && IPIT_max.trim().matches("[0-9]+") && bfg.trim().matches("[0-9]+") && bfg_max.trim().matches("[0-9]+") && total.trim().matches("[0-9]+") && total_max.trim().matches("[0-9]+");
                        if(a){
                   
                            a = (Integer.parseInt(bpet)<= Integer.parseInt(bpet_max)) && Integer.parseInt(bpet)>=0 && (Integer.parseInt(fire)<= Integer.parseInt(fire_max)) && Integer.parseInt(fire)>=0 && (Integer.parseInt(drill)<= Integer.parseInt(drill_max)) && Integer.parseInt(drill)>=0 && (Integer.parseInt(bfg)<= Integer.parseInt(bfg_max)) && Integer.parseInt(bfg)>=0&& (Integer.parseInt(total)<= Integer.parseInt(total_max)) && Integer.parseInt(total)>=0 && (Integer.parseInt(IPIT)<= Integer.parseInt(IPIT_max)) && Integer.parseInt(IPIT)>=0;
                            if(a){
                       
                                String q = "insert into cadre "+"values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                java.sql.PreparedStatement st = c.prepareStatement(q);
                                st.setString(1,service_number_textfield.getText().trim());
                                st.setString(2,date_of_from);
                                st.setString(3,date_of_to);
                                st.setString(4,nk);
                                st.setString(5,hav);
                                st.setString(6,nb);
                                st.setString(7,bpet+"/"+bpet_max);
                                st.setString(8,fire+"/"+fire_max);
                                st.setString(9,drill+"/"+drill_max); 
                                st.setString(10,IPIT+"/"+IPIT_max);
                                st.setString(11,bfg+"/"+bfg_max);
                                st.setString(12,total+"/"+total_max);
                                st.setString(13,result);
                                st.setString(14,remarks);
                                service_number_textfield.grabFocus();
                //ResultSet rs=st.executeQuery(); 
                                st.execute();
                                JOptionPane.showMessageDialog(null,"Data inserted successfully!");
                                name.setText("> XXXXXXX");
                                rank.setText("> XXXXXXX");
                                trade.setText("> XXXXXXX");
                                company.setText("> XXXXXXX");
                                unit.setText("> XXXXXXX");
                                unit_label.setText("Unit");
                                trade_label.setText("Trade");
                                service_number_textfield.setText("");
                                from_date_combobox.setSelectedItem("DD");
                                from_month_combobox.setSelectedItem("MM");
                                from_year_combobox.setSelectedItem("YYYY");
                                to_date_combobox.setSelectedItem("DD");
                                to_month_combobox.setSelectedItem("MM");
                                to_year_combobox.setSelectedItem("YYYY");
                                NK_textfield.setText("");
                                HAV_textfield.setText("");
                                NB_SUB_textfield.setText("");
                                bpet_textfield.setText("");
                                firing_textfield.setText("");
                                drill_textfield.setText("");
                                IPIT_textfield.setText("");
                                bfg_textfield.setText("");
                                total_textfield.setText("");
                                result_textfield.setText("");
                                remarks_textfield.setText("");
                                bpet_max_textfield.setText("");
                                firing_max_textfield.setText("");
                                drill_max_textfield.setText("");
                                IPIT_max_textfield.setText("");
                                bfg_max_textfield.setText("");
                                total_max_textfield.setText("");
                                
                                
                            }
                            else{
                            if((Integer.parseInt(bpet)> Integer.parseInt(bpet_max)) || Integer.parseInt(bpet)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                bpet_textfield.grabFocus();
                            }
                            else if((Integer.parseInt(fire)> Integer.parseInt(fire_max)) || Integer.parseInt(fire)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                firing_textfield.grabFocus();
                            }
                            else if((Integer.parseInt(drill)> Integer.parseInt(drill_max)) || Integer.parseInt(drill)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                drill_textfield.grabFocus();
                            }   
                            else if((Integer.parseInt(IPIT)> Integer.parseInt(IPIT_max)) || Integer.parseInt(IPIT)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                IPIT_textfield.grabFocus();
                            }
                            else if((Integer.parseInt(bfg)> Integer.parseInt(bfg_max)) || Integer.parseInt(bfg)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                bfg_textfield.grabFocus();
                            }
                            else if((Integer.parseInt(total)> Integer.parseInt(total_max)) || Integer.parseInt(total)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                total_textfield.grabFocus();
                            }
                            }
                        }
                        else{
                        if(!bpet.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            bpet_textfield.grabFocus();
                        }
                        else if(!fire.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            firing_textfield.grabFocus();
                        }
                        else if(!drill.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            drill_textfield.grabFocus();
                        }
                        else if(!IPIT.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            IPIT_textfield.grabFocus();
                        }
                        else if(!bfg.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            bfg_textfield.grabFocus();
                        }
                        else if(!total.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            total_textfield.grabFocus();
                        }
                        }
                    }
                    else{
                        if(cal == false || cal1 == false){
                            JOptionPane.showMessageDialog(null, "Invalid Date");
                        }
                        else if(all_check == false){
                            if((nk==null || nk.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for NK");
                                NK_textfield.grabFocus();
                            }
                            else if((hav==null || hav.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for HAV");
                                HAV_textfield.grabFocus();
                            }
                            else if((nb==null || nb.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for NB SUB");
                                NB_SUB_textfield.grabFocus();
                            }
                            else if((bpet==null || bpet.trim().isEmpty()) || (bpet_max==null || bpet_max.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for BPET");
                                bpet_textfield.grabFocus();
                            }
                            else if((fire==null || fire.trim().isEmpty())  || (fire_max==null || fire_max.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for Firing");
                                firing_textfield.grabFocus();
                            }
                            else if((drill==null || drill.trim().isEmpty()) || (drill_max==null || drill_max.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for Drill");
                                drill_textfield.grabFocus();
                            }
                            else if((IPIT==null || IPIT.trim().isEmpty())  || (IPIT_max==null || IPIT_max.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for IP/IT");
                                IPIT_textfield.grabFocus();
                            }
                            else if((bfg==null || bfg.trim().isEmpty()) || (bfg_max==null || bfg_max.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for BFG");
                                bfg_textfield.grabFocus();
                            }
                            else if((total==null || total.trim().isEmpty()) || (total_max==null || total_max.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for Total marks");
                                total_textfield.grabFocus();
                            }
                            else if((result==null || result.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some value for Result");
                                result_textfield.grabFocus();
                            }
                            else if((remarks==null || remarks.trim().isEmpty())){
                                JOptionPane.showMessageDialog(null, "Please Enter some Remarks");
                                remarks_textfield.grabFocus();
                            }
                            
                        }
                   
                    }
                    
                }
                
            }
            catch(Exception e){
                System.out.println(e);
                }
            
        }
    }//GEN-LAST:event_insert_buttonAMouseClicked

    private void insert_buttonAMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insert_buttonAMouseEntered
        insert_buttonA.setBackground(new java.awt.Color(237, 224, 255));
                service_number_textfield.grabFocus();

    }//GEN-LAST:event_insert_buttonAMouseEntered

    private void insert_buttonAMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_insert_buttonAMouseExited
        insert_buttonA.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_insert_buttonAMouseExited

    private void fullscreen_buttonBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullscreen_buttonBMouseClicked
        fullscreen_panelB.setVisible(true);
        bg.setVisible(false);
    }//GEN-LAST:event_fullscreen_buttonBMouseClicked

    private void fullscreen_buttonBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullscreen_buttonBMouseEntered
        fullscreen_buttonB.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_fullscreen_buttonBMouseEntered

    private void fullscreen_buttonBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullscreen_buttonBMouseExited
        fullscreen_buttonB.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_fullscreen_buttonBMouseExited

    private void refresh_buttonBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_buttonBMouseClicked
        viewall("null");
    }//GEN-LAST:event_refresh_buttonBMouseClicked

    private void refresh_buttonBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_buttonBMouseEntered
        refresh_buttonB.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_refresh_buttonBMouseEntered

    private void refresh_buttonBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_buttonBMouseExited
        refresh_buttonB.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_refresh_buttonBMouseExited

    private void edit_buttonBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edit_buttonBMouseClicked
        if(TableG_out.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(null, "Please select element from table to edit.");
        }
        else{
            ScrollPaneA.setVisible(false);
            panelB.setVisible(false);
            ScrollPaneC.setVisible(true);
            fullscreen_panelB.setVisible(false);
        
            print_buttonA.setVisible(false);
            insert_buttonA.setVisible(false);
            print_buttonB.setVisible(false);
            edit_buttonB.setVisible(false);
            refresh_buttonB.setVisible(false);
            fullscreen_buttonB.setVisible(false);
            update_buttonC.setVisible(true);
            
            String q = "select * from new_registration where service_no = '"+(String) TableG_out.getValueAt(TableG_out.getSelectedRow(),1)+"';";
             ResultSet rs = null;
             boolean a = false,b = false, c = false;
            try {
               rs = s.executeQuery(q);
               a = rs.next();
               
               q = "select * from attach_in where Service_no = '"+(String) TableG_out.getValueAt(TableG_out.getSelectedRow(),1)+"';";
               rs = s.executeQuery(q);
               b = rs.next();
               
               q = "select * from post_in where Service_no = '"+(String) TableG_out.getValueAt(TableG_out.getSelectedRow(),1)+"';";
               rs = s.executeQuery(q);
               c = rs.next();
               
            } catch (SQLException ex) {
                Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
            }
            String rank = "",name = "", army = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),1);
            
            
            if(a == true){
                try {
                    q = "select * from new_registration where service_no= '"+army+"';";
                    rs = s.executeQuery(q);
                    while(rs.next()){
                        rank = rs.getString("Rank_");
                        name = rs.getString("Name");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(b == true){
                try {
                    q = "select * from attach_in where Service_no= '"+army+"';";
                    rs = s.executeQuery(q);
                    while(rs.next()){
                        rank = rs.getString("Rank_");
                        name = rs.getString("Name");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if(c == true){
                try {
                    q = "select * from post_in where Service_no= '"+army+"';";
                    rs = s.executeQuery(q);
                    while(rs.next()){
                        rank = rs.getString("Rank_");
                        name = rs.getString("Name");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            army_numberC.setText(army);
            nameC.setText(name);
            rankC.setText(rank);
            String[] arr = new String[13];
            try {
                    String from = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),2);
                    String to = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),3);
                    q = "select * from cadre where Army_no= '"+army+"' and Date_from = '"+from+"' and Date_to = '"+to+"';";
                    rs = s.executeQuery(q);
                    
                    while(rs.next()){
                        arr[0] = rs.getString("Date_from");
                        arr[1] = rs.getString("Date_to");
                        arr[2] = rs.getString("cadre_NK");
                        arr[3] = rs.getString("HAV");
                        arr[4] = rs.getString("NB_SUB");
                        arr[5] = rs.getString("BPET");
                        arr[6] = rs.getString("firing");
                        arr[7] = rs.getString("drill");
                        arr[8] = rs.getString("ipit");
                        arr[9] = rs.getString("bfg");
                        arr[10] = rs.getString("total");
                        arr[11] = rs.getString("result");
                        arr[12] = rs.getString("remarks");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
            from_date_comboboxC.setSelectedItem(arr[0].split("-")[0]);
            from_month_comboboxC.setSelectedItem(arr[0].split("-")[1]);
            from_year_comboboxC.setSelectedItem(arr[0].split("-")[2]);
            to_date_comboboxC.setSelectedItem(arr[1].split("-")[0]);
            to_month_comboboxC.setSelectedItem(arr[1].split("-")[1]);
            to_year_comboboxC.setSelectedItem(arr[1].split("-")[2]);
            bpet_textfieldC.setText(arr[5].split("/")[0]);
            bpet_max_textfieldC.setText(arr[5].split("/")[1]);
            firing_textfieldC.setText(arr[6].split("/")[0]);
            NK_textfieldC.setText(arr[2]);
            HAV_textfieldC.setText(arr[3]);
            NB_SUB_textfieldC.setText(arr[4]);
            firing_max_textfieldC.setText(arr[6].split("/")[1]);
            drill_textfieldC.setText(arr[7].split("/")[0]);
            drill_max_textfieldC.setText(arr[7].split("/")[1]);
            IPIT_textfieldC.setText(arr[8].split("/")[0]);
            IPIT_max_textfieldC.setText(arr[8].split("/")[1]);
            bfg_textfieldC.setText(arr[9].split("/")[0]);
            bfg_max_textfieldC.setText(arr[9].split("/")[1]);
            total_textfieldC.setText(arr[10].split("/")[0]);
            total_max_textfieldC.setText(arr[10].split("/")[1]);
            result_textfieldC.setText(arr[11]);
            remarks_textfieldC.setText(arr[12]);
        }
        
    }//GEN-LAST:event_edit_buttonBMouseClicked

    private void edit_buttonBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edit_buttonBMouseEntered
        edit_buttonB.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_edit_buttonBMouseEntered

    private void edit_buttonBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edit_buttonBMouseExited
        edit_buttonB.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_edit_buttonBMouseExited

    private void update_buttonCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_buttonCMouseClicked
        // TODO add your handling code here:
        String sno = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),1);
       // PreparedStatement  st   = null;

            try{
                String nk =NK_textfieldC.getText();
                //date of test
                String year = (String)from_year_comboboxC.getSelectedItem();
                String month = (String)from_month_comboboxC.getSelectedItem();
                String date = (String)from_date_comboboxC.getSelectedItem();
                String date_of_from = date+"-"+month+"-"+year;
                
                
                String year1 = (String)to_year_comboboxC.getSelectedItem();
                String month1 = (String)to_month_comboboxC.getSelectedItem();
                String date1 = (String)to_date_comboboxC.getSelectedItem();
                String date_of_to = date1+"-"+month1+"-"+year1;
                
                
                String hav = HAV_textfieldC.getText();
                String nb = NB_SUB_textfieldC.getText();
                String remarks = remarks_textfieldC.getText();
                String result = result_textfieldC.getText();
                String bpet = bpet_textfieldC.getText();
                String bpet_max = bpet_max_textfieldC.getText();
                String fire = firing_textfieldC.getText();
                String fire_max = firing_max_textfieldC.getText();
                String drill = drill_textfieldC.getText();
                String drill_max = drill_max_textfieldC.getText();
                String IPIT = IPIT_textfieldC.getText();
                String IPIT_max = IPIT_max_textfieldC.getText();
                String bfg = bfg_textfieldC.getText();
                String bfg_max = bfg_max_textfieldC.getText();
                String total = total_textfieldC.getText();
                String total_max = total_max_textfieldC.getText();
                
                String err ="";
                boolean attach= true;
                
                ResultSet rs = null;
          
                
                    boolean cal = false;
                    boolean cal1 = false;
                    boolean da = year!= "YYYY" && month!= "MM" && date!= "DD";
                    boolean da1 = year1!= "YYYY" && month1!= "MM" && date1!= "DD";
                    if(da == false){
                        String[] arr = new String[2];
                    try {
                    String from = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),2);
                    String to = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),3);
                    String q = "select * from cadre where Army_no= '"+sno+"' and Date_from = '"+from+"' and Date_to = '"+to+"';";
                    rs = s.executeQuery(q);
                    
                    while(rs.next()){
                        arr[0] = rs.getString("Date_from");
                        arr[1] = rs.getString("Date_to");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
                        from_date_comboboxC.setSelectedItem(arr[0].split("-")[0]);
                        from_month_comboboxC.setSelectedItem(arr[0].split("-")[1]);
                        from_year_comboboxC.setSelectedItem(arr[0].split("-")[2]);
                        year = (String)from_year_comboboxC.getSelectedItem();
                        month = (String)from_month_comboboxC.getSelectedItem();
                        date = (String)from_date_comboboxC.getSelectedItem();
                        date_of_from = date+"-"+month+"-"+year;
                    }
                    if(da1 == false){
                        String[] arr = new String[2];
                    try {
                    String from = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),2);
                    String to = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),3);
                    String q = "select * from cadre where Army_no= '"+sno+"' and Date_from = '"+from+"' and Date_to = '"+to+"';";
                    rs = s.executeQuery(q);
                    
                    while(rs.next()){
                        arr[0] = rs.getString("Date_from");
                        arr[1] = rs.getString("Date_to");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
                        to_date_comboboxC.setSelectedItem(arr[1].split("-")[0]);
                        to_month_comboboxC.setSelectedItem(arr[1].split("-")[1]);
                        to_year_comboboxC.setSelectedItem(arr[1].split("-")[2]);
                        year1 = (String)to_year_comboboxC.getSelectedItem();
                        month1 = (String)to_month_comboboxC.getSelectedItem();
                        date1 = (String)to_date_comboboxC.getSelectedItem();
                        date_of_to = date1+"-"+month1+"-"+year1;
                    }
                    int y = Integer.parseInt(year);
                    int m = Integer.parseInt(month);
                    int d = Integer.parseInt(date);
                    int y1 = Integer.parseInt(year1);
                    int m1 = Integer.parseInt(month1);
                    int d1 = Integer.parseInt(date1);
                    cal = !((y%4==0 && m==2 &&  (d>29)  )   || (  (m==2 || m==4 || m==6 || m==9 || m==11)  && d==31  )    ||  (m==2 && d>28 && y%4!=0));
                    cal1 = !((y1%4==0 && m1==2 &&  (d1>29)  )   || (  (m1==2 || m1==4 || m1==6 || m1==9 || m1==11)  && d1==31  )    ||  (m1==2 && d1>28 && y1%4!=0));
                    
                    
                    if(cal == true && cal1 == true){
             
                        boolean a = bpet.trim().matches("[0-9]+") && bpet_max.trim().matches("[0-9]+") && fire.trim().matches("[0-9]+") && fire_max.trim().matches("[0-9]+") && drill.trim().matches("[0-9]+") && drill_max.trim().matches("[0-9]+") && IPIT.trim().matches("[0-9]+") && IPIT_max.trim().matches("[0-9]+") && bfg.trim().matches("[0-9]+") && bfg_max.trim().matches("[0-9]+") && total.trim().matches("[0-9]+") && total_max.trim().matches("[0-9]+");
                        if(a){
                            
                            a = (Integer.parseInt(bpet)<= Integer.parseInt(bpet_max)) && Integer.parseInt(bpet)>=0 && (Integer.parseInt(fire)<= Integer.parseInt(fire_max)) && Integer.parseInt(fire)>=0 && (Integer.parseInt(drill)<= Integer.parseInt(drill_max)) && Integer.parseInt(drill)>=0 && (Integer.parseInt(bfg)<= Integer.parseInt(bfg_max)) && Integer.parseInt(bfg)>=0&& (Integer.parseInt(total)<= Integer.parseInt(total_max)) && Integer.parseInt(total)>=0 && (Integer.parseInt(IPIT)<= Integer.parseInt(IPIT_max)) && Integer.parseInt(IPIT)>=0;
                            if(a){
                    String[] arr = new String[13];
                    try {
                    String from = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),2);
                    String to = (String) TableG_out.getValueAt(TableG_out.getSelectedRow(),3);
                    String q = "select * from cadre where Army_no= '"+sno+"' and Date_from = '"+from+"' and Date_to = '"+to+"';";
                    rs = s.executeQuery(q);
                    
                    while(rs.next()){
                        arr[0] = rs.getString("Date_from");
                        arr[1] = rs.getString("Date_to");
                        arr[2] = rs.getString("cadre_NK");
                        arr[3] = rs.getString("HAV");
                        arr[4] = rs.getString("NB_SUB");
                        arr[5] = rs.getString("BPET");
                        arr[6] = rs.getString("firing");
                        arr[7] = rs.getString("drill");
                        arr[8] = rs.getString("ipit");
                        arr[9] = rs.getString("bfg");
                        arr[10] = rs.getString("total");
                        arr[11] = rs.getString("result");
                        arr[12] = rs.getString("remarks");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Cadre.class.getName()).log(Level.SEVERE, null, ex);
                }
            

            
                            if((nk==null || nk.trim().isEmpty())){
                                NK_textfieldC.setText(arr[2]);
                            }
                            if((hav==null || hav.trim().isEmpty())){
                                HAV_textfieldC.setText(arr[3]);
                            }
                            if((nb==null || nb.trim().isEmpty())){
                                NB_SUB_textfieldC.setText(arr[4]);
                            }
                            if((bpet==null || bpet.trim().isEmpty()) || (bpet_max==null || bpet_max.trim().isEmpty())){
                                bpet_textfieldC.setText(arr[5].split("/")[0]);
                                bpet_max_textfieldC.setText(arr[5].split("/")[1]);
                            }
                            if((fire==null || fire.trim().isEmpty())  || (fire_max==null || fire_max.trim().isEmpty())){
                                firing_textfieldC.setText(arr[6].split("/")[0]);
                                firing_max_textfieldC.setText(arr[6].split("/")[1]);
                            }
                            if((drill==null || drill.trim().isEmpty()) || (drill_max==null || drill_max.trim().isEmpty())){
                                drill_textfieldC.setText(arr[7].split("/")[0]);
                                drill_max_textfieldC.setText(arr[7].split("/")[1]);
                            }
                            if((IPIT==null || IPIT.trim().isEmpty())  || (IPIT_max==null || IPIT_max.trim().isEmpty())){
                                IPIT_textfieldC.setText(arr[8].split("/")[0]);
                                IPIT_max_textfieldC.setText(arr[8].split("/")[1]);
                            }
                            if((bfg==null || bfg.trim().isEmpty()) || (bfg_max==null || bfg_max.trim().isEmpty())){
                                bfg_textfieldC.setText(arr[9].split("/")[0]);
                                bfg_max_textfieldC.setText(arr[9].split("/")[1]);
                            }
                            if((total==null || total.trim().isEmpty()) || (total_max==null || total_max.trim().isEmpty())){
                                total_textfieldC.setText(arr[10].split("/")[0]);
                                total_max_textfieldC.setText(arr[10].split("/")[1]);
                            }
                            if((result==null || result.trim().isEmpty())){
                                result_textfieldC.setText(arr[11]);
                            }
                            if((remarks==null || remarks.trim().isEmpty())){
                                remarks_textfieldC.setText(arr[12]);
                            }
                            
                        
                                String q = "update cadre set Army_no = ? ,Date_from = ? ,Date_to = ? ,cadre_NK = ? ,HAV = ? ,NB_SUB = ? ,BPET = ? ,firing = ? ,drill = ? ,ipit = ? ,bfg = ? ,total = ? ,result = ? ,remarks = ? where Army_no = ? and Date_from = ? and Date_to = ?";
                                java.sql.PreparedStatement st = c.prepareStatement(q);
                                st.setString(1,sno);
                                st.setString(2,date_of_from);
                                st.setString(3,date_of_to);
                                st.setString(4,nk);
                                st.setString(5,hav);
                                st.setString(6,nb);
                                st.setString(7,bpet+"/"+bpet_max);
                                st.setString(8,fire+"/"+fire_max);
                                st.setString(9,drill+"/"+drill_max); 
                                st.setString(10,IPIT+"/"+IPIT_max);
                                st.setString(11,bfg+"/"+bfg_max);
                                st.setString(12,total+"/"+total_max);
                                st.setString(13,result);
                                st.setString(14,remarks);
                                st.setString(15,sno);
                                st.setString(16,(String) TableG_out.getValueAt(TableG_out.getSelectedRow(),2));
                                st.setString(17,(String) TableG_out.getValueAt(TableG_out.getSelectedRow(),3));
                //ResultSet rs=st.executeQuery(); 
                                st.execute();
                                JOptionPane.showMessageDialog(null,"Data updated successfully!");
                                service_numberB.setText("");
                                nameC.setText("> XXXXXXX");
                                rankC.setText("> XXXXXXX");
                                army_numberC.setText("> XXXXXXX");
                                from_date_comboboxC.setSelectedItem("DD");
                                from_month_comboboxC.setSelectedItem("MM");
                                from_year_comboboxC.setSelectedItem("YYYY");
                                to_date_comboboxC.setSelectedItem("DD");
                                to_month_comboboxC.setSelectedItem("MM");
                                to_year_comboboxC.setSelectedItem("YYYY");
                                NK_textfieldC.setText("");
                                HAV_textfieldC.setText("");
                                NB_SUB_textfieldC.setText("");
                                bpet_textfieldC.setText("");
                                firing_textfieldC.setText("");
                                drill_textfieldC.setText("");
                                IPIT_textfieldC.setText("");
                                bfg_textfieldC.setText("");
                                total_textfieldC.setText("");
                                result_textfieldC.setText("");
                                remarks_textfieldC.setText("");
                                bpet_max_textfieldC.setText("");
                                firing_max_textfieldC.setText("");
                                drill_max_textfieldC.setText("");
                                IPIT_max_textfieldC.setText("");
                                bfg_max_textfieldC.setText("");
                                total_max_textfieldC.setText("");
                                menuB.setBackground(new java.awt.Color(85,65,118));
        menuA.setBackground(new java.awt.Color(64,43,100));
        
        print_buttonA.setVisible(false);
        insert_buttonA.setVisible(false);
        print_buttonB.setVisible(true);
        edit_buttonB.setVisible(true);
        refresh_buttonB.setVisible(true);
        fullscreen_buttonB.setVisible(true);
        update_buttonC.setVisible(false);
        
        ScrollPaneA.setVisible(false);
        panelB.setVisible(true);
        ScrollPaneC.setVisible(false);
        fullscreen_panelB.setVisible(false);
        
        viewall("null");
                                
                                
                            }
                            else{
                            if((Integer.parseInt(bpet)> Integer.parseInt(bpet_max)) || Integer.parseInt(bpet)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                bpet_textfieldC.grabFocus();
                            }
                            else if((Integer.parseInt(fire)> Integer.parseInt(fire_max)) || Integer.parseInt(fire)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                firing_textfieldC.grabFocus();
                            }
                            else if((Integer.parseInt(drill)> Integer.parseInt(drill_max)) || Integer.parseInt(drill)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                drill_textfieldC.grabFocus();
                            }   
                            else if((Integer.parseInt(IPIT)> Integer.parseInt(IPIT_max)) || Integer.parseInt(IPIT)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                IPIT_textfieldC.grabFocus();
                            }
                            else if((Integer.parseInt(bfg)> Integer.parseInt(bfg_max)) || Integer.parseInt(bfg)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                bfg_textfieldC.grabFocus();
                            }
                            else if((Integer.parseInt(total)> Integer.parseInt(total_max)) || Integer.parseInt(total)<0){
                                JOptionPane.showMessageDialog(null, "Either Entered marks is more than max. marks or less than zero.");
                                total_textfieldC.grabFocus();
                            }
                            }
                        }
                        else{
                        if(!bpet.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            bpet_textfieldC.grabFocus();
                        }
                        else if(!fire.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            firing_textfieldC.grabFocus();
                        }
                        else if(!drill.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            drill_textfieldC.grabFocus();
                        }
                        else if(!IPIT.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            IPIT_textfieldC.grabFocus();
                        }
                        else if(!bfg.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            bfg_textfieldC.grabFocus();
                        }
                        else if(!total.trim().matches("[0-9]+")){
                            JOptionPane.showMessageDialog(null, "Please Enter numerical value.");
                            total_textfieldC.grabFocus();
                        }
                        }
                    }
                    else{
                        
                            JOptionPane.showMessageDialog(null, "Invalid Date");
                            
                    }
                    
                
                
            }
            catch(Exception e){
                System.out.println(e);
                }
    }//GEN-LAST:event_update_buttonCMouseClicked

    private void update_buttonCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_buttonCMouseEntered
        update_buttonC.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_update_buttonCMouseEntered

    private void update_buttonCMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_buttonCMouseExited
        update_buttonC.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_update_buttonCMouseExited

    private void move_panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_move_panelMouseDragged
        this.setLocation(this.getX() +evt.getX() -mouseX, this.getY() + evt.getY() -mouseY);
    }//GEN-LAST:event_move_panelMouseDragged

    private void move_panelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_move_panelMousePressed
        mouseX =evt.getX();
        mouseY =evt.getY();
    }//GEN-LAST:event_move_panelMousePressed

    private void exit_fullscreen_buttonBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_fullscreen_buttonBMouseClicked
        fullscreen_panelB.setVisible(false);
        bg.setVisible(true);
    }//GEN-LAST:event_exit_fullscreen_buttonBMouseClicked

    private void exit_fullscreen_buttonBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_fullscreen_buttonBMouseEntered
        exit_fullscreen_buttonB.setBackground(new java.awt.Color(237, 224, 255));
    }//GEN-LAST:event_exit_fullscreen_buttonBMouseEntered

    private void exit_fullscreen_buttonBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exit_fullscreen_buttonBMouseExited
        exit_fullscreen_buttonB.setBackground(new java.awt.Color(240,240,240));
    }//GEN-LAST:event_exit_fullscreen_buttonBMouseExited

    private void service_number_textfieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_service_number_textfieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            okayMouseClicked(null);
        }
    }//GEN-LAST:event_service_number_textfieldKeyPressed

    private void service_numberBKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_service_numberBKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            okayBMouseClicked(null);
        }
    }//GEN-LAST:event_service_numberBKeyPressed

    private void bpet_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bpet_textfieldFocusLost
        // TODO add your handling code here:
        String bpet = bpet_textfield.getText();
        String total = total_textfield.getText();

        if((bpet!=null && !bpet.trim().isEmpty())){
           if(bpet.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_textfield.setText(bpet);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_textfield.setText(bpet);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_textfield.getText().trim()) + Integer.parseInt(bpet);
                   total_textfield.setText(Integer.toString(t));
               }
           } 
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_bpet_textfieldFocusLost

    private void firing_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firing_textfieldFocusLost
        // TODO add your handling code here:
        String firing = firing_textfield.getText();
        String total = total_textfield.getText();

        if((firing!=null && !firing.trim().isEmpty())){
           if(firing.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_textfield.setText(firing);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_textfield.setText(firing);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_textfield.getText().trim()) + Integer.parseInt(firing);
                   total_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_firing_textfieldFocusLost

    private void drill_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_drill_textfieldFocusLost
        // TODO add your handling code here:
        String drill = drill_textfield.getText();
        String total = total_textfield.getText();

        if((drill!=null && !drill.trim().isEmpty())){
           if(drill.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_textfield.setText(drill);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_textfield.setText(drill);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_textfield.getText().trim()) + Integer.parseInt(drill);
                   total_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_drill_textfieldFocusLost

    private void IPIT_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IPIT_textfieldFocusLost
        // TODO add your handling code here:
        String ipit = IPIT_textfield.getText();
        String total = total_textfield.getText();

        if((ipit!=null && !ipit.trim().isEmpty())){
           if(ipit.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_textfield.setText(ipit);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_textfield.setText(ipit);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_textfield.getText().trim()) + Integer.parseInt(ipit);
                   total_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_IPIT_textfieldFocusLost

    private void bfg_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bfg_textfieldFocusLost
        // TODO add your handling code here:
        String bfg = bfg_textfield.getText();
        String total = total_textfield.getText();

        if((bfg!=null && !bfg.trim().isEmpty())){
           if(bfg.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_textfield.setText(bfg);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_textfield.setText(bfg);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_textfield.getText().trim()) + Integer.parseInt(bfg);
                   total_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_bfg_textfieldFocusLost

    private void bpet_max_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bpet_max_textfieldFocusLost
        // TODO add your handling code here:
        String bpet = bpet_max_textfield.getText();
        String total = total_max_textfield.getText();

        if((bpet!=null && !bpet.trim().isEmpty())){
           if(bpet.trim().matches("[0-9]+")){
               System.out.println("fgh");
               if((total==null || total.trim().isEmpty())){
                   total_max_textfield.setText(bpet);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_max_textfield.setText(bpet);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_max_textfield.getText().trim()) + Integer.parseInt(bpet);
                   total_max_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_bpet_max_textfieldFocusLost

    private void firing_max_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firing_max_textfieldFocusLost
        // TODO add your handling code here:
        String firing = firing_max_textfield.getText();
        String total = total_max_textfield.getText();

        if((firing!=null && !firing.trim().isEmpty())){
           if(firing.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_max_textfield.setText(firing);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_max_textfield.setText(firing);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_max_textfield.getText().trim()) + Integer.parseInt(firing);
                   total_max_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_firing_max_textfieldFocusLost

    private void drill_max_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_drill_max_textfieldFocusLost
        // TODO add your handling code here:
        String drill = drill_max_textfield.getText();
        String total = total_max_textfield.getText();

        if((drill!=null && !drill.trim().isEmpty())){
           if(drill.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_max_textfield.setText(drill);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_max_textfield.setText(drill);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_max_textfield.getText().trim()) + Integer.parseInt(drill);
                   total_max_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_drill_max_textfieldFocusLost

    private void IPIT_max_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IPIT_max_textfieldFocusLost
        // TODO add your handling code here:
        String ipit = IPIT_max_textfield.getText();
        String total = total_max_textfield.getText();

        if((ipit!=null && !ipit.trim().isEmpty())){
           if(ipit.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_max_textfield.setText(ipit);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_max_textfield.setText(ipit);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_max_textfield.getText().trim()) + Integer.parseInt(ipit);
                   total_max_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_IPIT_max_textfieldFocusLost

    private void bfg_max_textfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bfg_max_textfieldFocusLost
        // TODO add your handling code here:
        String bfg = bfg_max_textfield.getText();
        String total = total_max_textfield.getText();

        if((bfg!=null && !bfg.trim().isEmpty())){
           if(bfg.trim().matches("[0-9]+")){
               if((total==null || total.trim().isEmpty())){
                   total_max_textfield.setText(bfg);
               }
               else if(!total.trim().matches("[0-9]+")){
                   total_max_textfield.setText(bfg);
               }
               else{
                   if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
                   int t = Integer.parseInt(total_max_textfield.getText().trim()) + Integer.parseInt(bfg);
                   total_max_textfield.setText(Integer.toString(t));
               }
           }
           else{
               if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
           }
        }
        else{
            if((a!=null && !a.trim().isEmpty())){
                       System.out.println(a);
                        if(a.trim().matches("[0-9]+")){
                            int t = Integer.parseInt(total) - Integer.parseInt(a);
                            total_max_textfield.setText(Integer.toString(t));
                            a = "";
                        }
                   }
        }
    }//GEN-LAST:event_bfg_max_textfieldFocusLost

    private void bpet_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bpet_textfieldFocusGained
        // TODO add your handling code here:
        a = bpet_textfield.getText();
    }//GEN-LAST:event_bpet_textfieldFocusGained

    private void bpet_max_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bpet_max_textfieldFocusGained
        // TODO add your handling code here:
        a = bpet_max_textfield.getText();
    }//GEN-LAST:event_bpet_max_textfieldFocusGained

    private void firing_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firing_textfieldFocusGained
        // TODO add your handling code here:
        a = firing_textfield.getText();
    }//GEN-LAST:event_firing_textfieldFocusGained

    private void drill_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_drill_textfieldFocusGained
        // TODO add your handling code here:
        a = drill_textfield.getText();
    }//GEN-LAST:event_drill_textfieldFocusGained

    private void IPIT_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IPIT_textfieldFocusGained
        // TODO add your handling code here:
        a = IPIT_textfield.getText();
    }//GEN-LAST:event_IPIT_textfieldFocusGained

    private void bfg_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bfg_textfieldFocusGained
        // TODO add your handling code here:
        a = bfg_textfield.getText();
    }//GEN-LAST:event_bfg_textfieldFocusGained

    private void firing_max_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firing_max_textfieldFocusGained
        // TODO add your handling code here:
        a = firing_max_textfield.getText();
    }//GEN-LAST:event_firing_max_textfieldFocusGained

    private void drill_max_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_drill_max_textfieldFocusGained
        // TODO add your handling code here:
        a = drill_max_textfield.getText();
    }//GEN-LAST:event_drill_max_textfieldFocusGained

    private void IPIT_max_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_IPIT_max_textfieldFocusGained
        // TODO add your handling code here:
        a = IPIT_max_textfield.getText();
    }//GEN-LAST:event_IPIT_max_textfieldFocusGained

    private void bfg_max_textfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bfg_max_textfieldFocusGained
        // TODO add your handling code here:
        a = bfg_max_textfield.getText();
    }//GEN-LAST:event_bfg_max_textfieldFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cadre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cadre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cadre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cadre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cadre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BPET_label;
    private javax.swing.JLabel BPET_labelC;
    private javax.swing.JTextField HAV_textfield;
    private javax.swing.JTextField HAV_textfieldC;
    private javax.swing.JLabel IPIT_label;
    private javax.swing.JLabel IPIT_labelC;
    private javax.swing.JTextField IPIT_max_textfield;
    private javax.swing.JTextField IPIT_max_textfieldC;
    private javax.swing.JTextField IPIT_textfield;
    private javax.swing.JTextField IPIT_textfieldC;
    private javax.swing.JTextField NB_SUB_textfield;
    private javax.swing.JTextField NB_SUB_textfieldC;
    private javax.swing.JTextField NK_textfield;
    private javax.swing.JTextField NK_textfieldC;
    private javax.swing.JLabel PO_label;
    private javax.swing.JLabel PO_labelC;
    private javax.swing.JScrollPane ScrollPaneA;
    private javax.swing.JScrollPane ScrollPaneB;
    private javax.swing.JScrollPane ScrollPaneC;
    private javax.swing.JSeparator Separator;
    private javax.swing.JTable TableG_out;
    private javax.swing.JLabel address_label;
    private javax.swing.JLabel address_label1;
    private javax.swing.JLabel address_labelC;
    private javax.swing.JLabel army_numberC;
    private javax.swing.JLabel bfg_label;
    private javax.swing.JLabel bfg_labelC;
    private javax.swing.JTextField bfg_max_textfield;
    private javax.swing.JTextField bfg_max_textfieldC;
    private javax.swing.JTextField bfg_textfield;
    private javax.swing.JTextField bfg_textfieldC;
    private javax.swing.JPanel bg;
    private javax.swing.JTextField bpet_max_textfield;
    private javax.swing.JTextField bpet_max_textfieldC;
    private javax.swing.JTextField bpet_textfield;
    private javax.swing.JTextField bpet_textfieldC;
    private javax.swing.JSeparator cadre_underline1;
    private javax.swing.JSeparator cadre_underline2;
    private javax.swing.JSeparator cadre_underline3;
    private javax.swing.JSeparator cadre_underline4;
    private javax.swing.JSeparator cadre_underline5;
    private javax.swing.JSeparator cadre_underline6;
    private javax.swing.JLabel changing_for_label;
    private javax.swing.JLabel company;
    private javax.swing.JLabel company_label;
    private javax.swing.JLabel drill_label;
    private javax.swing.JLabel drill_labelC;
    private javax.swing.JTextField drill_max_textfield;
    private javax.swing.JTextField drill_max_textfieldC;
    private javax.swing.JTextField drill_textfield;
    private javax.swing.JTextField drill_textfieldC;
    private javax.swing.JPanel edit_buttonB;
    private javax.swing.JLabel edit_labelB;
    private javax.swing.JPanel exit_fullscreen_buttonB;
    private javax.swing.JLabel exit_fullscreen_labelB;
    private javax.swing.JLabel exit_icon;
    private javax.swing.JLabel firing_label;
    private javax.swing.JLabel firing_labelC;
    private javax.swing.JTextField firing_max_textfield;
    private javax.swing.JTextField firing_max_textfieldC;
    private javax.swing.JTextField firing_textfield;
    private javax.swing.JTextField firing_textfieldC;
    private javax.swing.JComboBox<String> from_date_combobox;
    private javax.swing.JComboBox<String> from_date_comboboxC;
    private javax.swing.JLabel from_date_label;
    private javax.swing.JLabel from_labelC;
    private javax.swing.JComboBox<String> from_month_combobox;
    private javax.swing.JComboBox<String> from_month_comboboxC;
    private javax.swing.JComboBox<String> from_year_combobox;
    private javax.swing.JComboBox<String> from_year_comboboxC;
    private javax.swing.JScrollPane fullscreen_ScrollPaneB;
    private javax.swing.JPanel fullscreen_buttonB;
    private javax.swing.JLabel fullscreen_labelB;
    private javax.swing.JPanel fullscreen_panelB;
    private javax.swing.JTable fullscreen_tableB;
    private javax.swing.JLabel go_back_label;
    private javax.swing.JPanel insert_buttonA;
    private javax.swing.JLabel insert_label;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel marks_obtainedC;
    private javax.swing.JSeparator marks_underline1;
    private javax.swing.JSeparator marks_underline10;
    private javax.swing.JSeparator marks_underline11;
    private javax.swing.JSeparator marks_underline12;
    private javax.swing.JSeparator marks_underline13;
    private javax.swing.JSeparator marks_underline14;
    private javax.swing.JSeparator marks_underline15;
    private javax.swing.JSeparator marks_underline16;
    private javax.swing.JSeparator marks_underline17;
    private javax.swing.JSeparator marks_underline18;
    private javax.swing.JSeparator marks_underline19;
    private javax.swing.JSeparator marks_underline2;
    private javax.swing.JSeparator marks_underline20;
    private javax.swing.JSeparator marks_underline21;
    private javax.swing.JSeparator marks_underline22;
    private javax.swing.JSeparator marks_underline23;
    private javax.swing.JSeparator marks_underline24;
    private javax.swing.JSeparator marks_underline25;
    private javax.swing.JSeparator marks_underline26;
    private javax.swing.JSeparator marks_underline27;
    private javax.swing.JSeparator marks_underline28;
    private javax.swing.JSeparator marks_underline29;
    private javax.swing.JSeparator marks_underline3;
    private javax.swing.JSeparator marks_underline30;
    private javax.swing.JSeparator marks_underline4;
    private javax.swing.JSeparator marks_underline5;
    private javax.swing.JSeparator marks_underline6;
    private javax.swing.JSeparator marks_underline7;
    private javax.swing.JSeparator marks_underline8;
    private javax.swing.JSeparator marks_underline9;
    private javax.swing.JPanel menuA;
    private javax.swing.JLabel menuA_icon;
    private javax.swing.JLabel menuA_label;
    private javax.swing.JPanel menuB;
    private javax.swing.JLabel menuB_icon;
    private javax.swing.JLabel menuB_label;
    private javax.swing.JSeparator midA1;
    private javax.swing.JSeparator midA2;
    private javax.swing.JSeparator midA4;
    private javax.swing.JSeparator midC0;
    private javax.swing.JSeparator midC3;
    private javax.swing.JSeparator midC4;
    private javax.swing.JLabel minimize;
    private javax.swing.JPanel move_panel;
    private javax.swing.JLabel name;
    private javax.swing.JLabel nameC;
    private javax.swing.JLabel name_label;
    private javax.swing.JLabel name_labelC;
    private javax.swing.JLabel okay;
    private javax.swing.JLabel okayB;
    private javax.swing.JPanel panelA;
    private javax.swing.JSeparator panelA_bottom_line;
    private javax.swing.JPanel panelB;
    private javax.swing.JPanel panelC;
    private javax.swing.JSeparator panelC_bottom_line;
    private javax.swing.JPanel print_buttonA;
    private javax.swing.JPanel print_buttonB;
    private javax.swing.JLabel print_label;
    private javax.swing.JLabel print_labelB;
    private javax.swing.JLabel rank;
    private javax.swing.JLabel rankC;
    private javax.swing.JLabel rank_label;
    private javax.swing.JLabel rank_labelC;
    private javax.swing.JPanel refresh_buttonB;
    private javax.swing.JLabel refresh_labelB;
    private javax.swing.JLabel remarks_label;
    private javax.swing.JLabel remarks_labelC;
    private javax.swing.JTextField remarks_textfield;
    private javax.swing.JTextField remarks_textfieldC;
    private javax.swing.JSeparator remarks_underline;
    private javax.swing.JSeparator remarks_underline1;
    private javax.swing.JLabel result_label;
    private javax.swing.JLabel result_labelC;
    private javax.swing.JTextField result_textfield;
    private javax.swing.JTextField result_textfieldC;
    private javax.swing.JSeparator results_underline;
    private javax.swing.JSeparator results_underline1;
    private javax.swing.JTextField service_numberB;
    private javax.swing.JLabel service_number_label;
    private javax.swing.JLabel service_number_labelB;
    private javax.swing.JLabel service_number_labelC;
    private javax.swing.JTextField service_number_textfield;
    private javax.swing.JSeparator service_number_underline;
    private javax.swing.JPanel side_pane;
    private javax.swing.JLabel slash10;
    private javax.swing.JLabel slash11;
    private javax.swing.JLabel slash12;
    private javax.swing.JLabel slash7;
    private javax.swing.JLabel slash8;
    private javax.swing.JLabel slash9;
    private javax.swing.JLabel teh_label;
    private javax.swing.JLabel teh_labelC;
    private javax.swing.JSeparator textfield_underline;
    private javax.swing.JLabel title_icon;
    private javax.swing.JLabel title_label;
    private javax.swing.JComboBox<String> to_date_combobox;
    private javax.swing.JComboBox<String> to_date_comboboxC;
    private javax.swing.JLabel to_date_label;
    private javax.swing.JLabel to_labelC;
    private javax.swing.JComboBox<String> to_month_combobox;
    private javax.swing.JComboBox<String> to_month_comboboxC;
    private javax.swing.JComboBox<String> to_year_combobox;
    private javax.swing.JComboBox<String> to_year_comboboxC;
    private javax.swing.JLabel total_label;
    private javax.swing.JLabel total_labelC;
    private javax.swing.JTextField total_max_textfield;
    private javax.swing.JTextField total_max_textfieldC;
    private javax.swing.JTextField total_textfield;
    private javax.swing.JTextField total_textfieldC;
    private javax.swing.JLabel trade;
    private javax.swing.JLabel trade_label;
    private javax.swing.JLabel unit;
    private javax.swing.JLabel unit_label;
    private javax.swing.JPanel update_buttonC;
    private javax.swing.JLabel update_labelC;
    private javax.swing.JLabel vill_label;
    private javax.swing.JLabel vill_labelC;
    // End of variables declaration//GEN-END:variables
}
